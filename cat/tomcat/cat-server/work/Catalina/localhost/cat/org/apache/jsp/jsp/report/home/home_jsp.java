/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.62
 * Generated at: 2015-09-21 09:17:20 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsp.report.home;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class home_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(48);
    _jspx_dependants.put("/jsp/report/home/userMonitor.jsp", Long.valueOf(1440387592000L));
    _jspx_dependants.put("/jsp/report/home/userDocument/report.jsp", Long.valueOf(1440387592000L));
    _jspx_dependants.put("/jsp/report/home/integrating.jsp", Long.valueOf(1440387592000L));
    _jspx_dependants.put("/jsp/report/home/userMonitor/app.jsp", Long.valueOf(1440387592000L));
    _jspx_dependants.put("/jsp/report/home/problem.jsp", Long.valueOf(1440387592000L));
    _jspx_dependants.put("/jsp/report/home/interface/alterationDocument.jsp", Long.valueOf(1440387592000L));
    _jspx_dependants.put("/WEB-INF/app.tld", Long.valueOf(1440387592000L));
    _jspx_dependants.put("/jsp/report/home/developDocument.jsp", Long.valueOf(1440387592000L));
    _jspx_dependants.put("/jsp/report/home/interface/heartbeat.jsp", Long.valueOf(1440387592000L));
    _jspx_dependants.put("/jsp/report/home/alertDocument/overall.jsp", Long.valueOf(1440387592000L));
    _jspx_dependants.put("/jsp/report/home/alertDocument/transaction.jsp", Long.valueOf(1440387592000L));
    _jspx_dependants.put("/WEB-INF/tags/home.tag", Long.valueOf(1440405134000L));
    _jspx_dependants.put("/jsp/report/home/userDocument/storage.jsp", Long.valueOf(1440387592000L));
    _jspx_dependants.put("/jsp/report/home/alertDocument/frontendException.jsp", Long.valueOf(1440387592000L));
    _jspx_dependants.put("/jsp/report/home/userDocument/matrix.jsp", Long.valueOf(1440387592000L));
    _jspx_dependants.put("/jsp/report/home/userDocument/heartbeat.jsp", Long.valueOf(1440387592000L));
    _jspx_dependants.put("/jsp/report/home/userDocument/transaction.jsp", Long.valueOf(1440387592000L));
    _jspx_dependants.put("/jsp/report/home/interface/alertApi.jsp", Long.valueOf(1440387592000L));
    _jspx_dependants.put("/WEB-INF/tags/base.tag", Long.valueOf(1440405134000L));
    _jspx_dependants.put("/jsp/report/home/interface/userMonitor.jsp", Long.valueOf(1440387592000L));
    _jspx_dependants.put("/WEB-INF/webres.tld", Long.valueOf(1440387592000L));
    _jspx_dependants.put("/jsp/report/home/interface/report.jsp", Long.valueOf(1440387592000L));
    _jspx_dependants.put("/jsp/report/home/userDocument.jsp", Long.valueOf(1440387592000L));
    _jspx_dependants.put("/jsp/report/home/plugin.jsp", Long.valueOf(1440387592000L));
    _jspx_dependants.put("/jsp/report/home/alertDocument/system.jsp", Long.valueOf(1440387592000L));
    _jspx_dependants.put("/jsp/report/home/index.jsp", Long.valueOf(1440387592000L));
    _jspx_dependants.put("/jsp/report/home/deploy.jsp", Long.valueOf(1440387592000L));
    _jspx_dependants.put("/jsp/report/home/interface/appCommand.jsp", Long.valueOf(1440387592000L));
    _jspx_dependants.put("/jsp/report/home/interface/alertInterface.jsp", Long.valueOf(1440387592000L));
    _jspx_dependants.put("/jsp/report/home/alertDocument/business.jsp", Long.valueOf(1440387592000L));
    _jspx_dependants.put("/jsp/report/home/alertDocument/network.jsp", Long.valueOf(1440387592000L));
    _jspx_dependants.put("/jsp/report/home/userDocument/overall.jsp", Long.valueOf(1440387592000L));
    _jspx_dependants.put("/jsp/report/home/userDocument/dependency.jsp", Long.valueOf(1440387592000L));
    _jspx_dependants.put("/jsp/report/home/userMonitor/web.jsp", Long.valueOf(1440387592000L));
    _jspx_dependants.put("/jsp/report/home/userDocument/logview.jsp", Long.valueOf(1440387592000L));
    _jspx_dependants.put("/jsp/report/home/userDocument/metric.jsp", Long.valueOf(1440387592000L));
    _jspx_dependants.put("/jsp/report/home/releasenotes.jsp", Long.valueOf(1440387592000L));
    _jspx_dependants.put("/jsp/report/home/alertDocument/heartbeat.jsp", Long.valueOf(1440387592000L));
    _jspx_dependants.put("/jsp/report/home/alertDocument/database.jsp", Long.valueOf(1440387592000L));
    _jspx_dependants.put("/jsp/report/home/userDocument/event.jsp", Long.valueOf(1440387592000L));
    _jspx_dependants.put("/jsp/report/home/interface.jsp", Long.valueOf(1440387592000L));
    _jspx_dependants.put("/jsp/report/home/alertDocument/exception.jsp", Long.valueOf(1440387592000L));
    _jspx_dependants.put("/jsp/report/home/interface/metric.jsp", Long.valueOf(1440387592000L));
    _jspx_dependants.put("/jsp/report/home/alert.jsp", Long.valueOf(1440387592000L));
    _jspx_dependants.put("/jsp/report/home/userDocument/cross.jsp", Long.valueOf(1440387592000L));
    _jspx_dependants.put("/jsp/report/home/develop.jsp", Long.valueOf(1440387592000L));
    _jspx_dependants.put("/jsp/report/home/alertDocument/thirdPartyException.jsp", Long.valueOf(1440387592000L));
    _jspx_dependants.put("/jsp/report/home/userDocument/problem.jsp", Long.valueOf(1440387592000L));
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fchoose;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fotherwise;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fchoose = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fotherwise = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fchoose.release();
    _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.release();
    _005fjspx_005ftagPool_005fc_005fotherwise.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, false, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      com.dianping.cat.report.page.home.Context ctx = null;
      ctx = (com.dianping.cat.report.page.home.Context) _jspx_page_context.getAttribute("ctx", javax.servlet.jsp.PageContext.REQUEST_SCOPE);
      if (ctx == null){
        throw new java.lang.InstantiationException("bean ctx not found within scope");
      }
      out.write('\n');
      com.dianping.cat.report.page.home.Payload payload = null;
      payload = (com.dianping.cat.report.page.home.Payload) _jspx_page_context.getAttribute("payload", javax.servlet.jsp.PageContext.REQUEST_SCOPE);
      if (payload == null){
        throw new java.lang.InstantiationException("bean payload not found within scope");
      }
      out.write('\n');
      com.dianping.cat.report.page.home.Model model = null;
      model = (com.dianping.cat.report.page.home.Model) _jspx_page_context.getAttribute("model", javax.servlet.jsp.PageContext.REQUEST_SCOPE);
      if (model == null){
        throw new java.lang.InstantiationException("bean model not found within scope");
      }
      out.write('\n');
      if (_jspx_meth_a_005fhome_005f0(_jspx_page_context))
        return;
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_a_005fhome_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  a:home
    org.apache.jsp.tag.webhome_tag _jspx_th_a_005fhome_005f0 = (new org.apache.jsp.tag.webhome_tag());
    _jsp_instancemanager.newInstance(_jspx_th_a_005fhome_005f0);
    _jspx_th_a_005fhome_005f0.setJspContext(_jspx_page_context);
    _jspx_th_a_005fhome_005f0.setJspBody(new Helper( 0, _jspx_page_context, _jspx_th_a_005fhome_005f0, null));
    _jspx_th_a_005fhome_005f0.doTag();
    _jsp_instancemanager.destroyInstance(_jspx_th_a_005fhome_005f0);
    return false;
  }

  private boolean _jspx_meth_c_005fchoose_005f0(javax.servlet.jsp.tagext.JspTag _jspx_parent, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:choose
    org.apache.taglibs.standard.tag.common.core.ChooseTag _jspx_th_c_005fchoose_005f0 = (org.apache.taglibs.standard.tag.common.core.ChooseTag) _005fjspx_005ftagPool_005fc_005fchoose.get(org.apache.taglibs.standard.tag.common.core.ChooseTag.class);
    _jspx_th_c_005fchoose_005f0.setPageContext(_jspx_page_context);
    _jspx_th_c_005fchoose_005f0.setParent(new javax.servlet.jsp.tagext.TagAdapter((javax.servlet.jsp.tagext.SimpleTag) _jspx_parent));
    int _jspx_eval_c_005fchoose_005f0 = _jspx_th_c_005fchoose_005f0.doStartTag();
    if (_jspx_eval_c_005fchoose_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
      do {
        out.write("\n");
        out.write("\t\t\t\t");
        if (_jspx_meth_c_005fwhen_005f0(_jspx_th_c_005fchoose_005f0, _jspx_page_context))
          return true;
        out.write("\n");
        out.write("\t   \t");
        if (_jspx_meth_c_005fwhen_005f1(_jspx_th_c_005fchoose_005f0, _jspx_page_context))
          return true;
        out.write("\n");
        out.write("\t   \t");
        if (_jspx_meth_c_005fwhen_005f2(_jspx_th_c_005fchoose_005f0, _jspx_page_context))
          return true;
        out.write("\n");
        out.write("\t   \t");
        if (_jspx_meth_c_005fwhen_005f3(_jspx_th_c_005fchoose_005f0, _jspx_page_context))
          return true;
        out.write("\n");
        out.write("\t   \t");
        if (_jspx_meth_c_005fwhen_005f4(_jspx_th_c_005fchoose_005f0, _jspx_page_context))
          return true;
        out.write("\n");
        out.write("\t   \t");
        if (_jspx_meth_c_005fwhen_005f5(_jspx_th_c_005fchoose_005f0, _jspx_page_context))
          return true;
        out.write("\n");
        out.write("\t   \t");
        if (_jspx_meth_c_005fwhen_005f6(_jspx_th_c_005fchoose_005f0, _jspx_page_context))
          return true;
        out.write("\n");
        out.write("\t   \t");
        if (_jspx_meth_c_005fwhen_005f7(_jspx_th_c_005fchoose_005f0, _jspx_page_context))
          return true;
        out.write("\n");
        out.write("\t   \t");
        if (_jspx_meth_c_005fwhen_005f8(_jspx_th_c_005fchoose_005f0, _jspx_page_context))
          return true;
        out.write("\n");
        out.write("\t   \t");
        if (_jspx_meth_c_005fwhen_005f9(_jspx_th_c_005fchoose_005f0, _jspx_page_context))
          return true;
        out.write("\n");
        out.write("\t   \t");
        if (_jspx_meth_c_005fwhen_005f10(_jspx_th_c_005fchoose_005f0, _jspx_page_context))
          return true;
        out.write("\n");
        out.write("\t   \t");
        if (_jspx_meth_c_005fwhen_005f11(_jspx_th_c_005fchoose_005f0, _jspx_page_context))
          return true;
        out.write("\n");
        out.write("\t   \t");
        if (_jspx_meth_c_005fotherwise_005f0(_jspx_th_c_005fchoose_005f0, _jspx_page_context))
          return true;
        out.write("\n");
        out.write("\t \t\t");
        int evalDoAfterBody = _jspx_th_c_005fchoose_005f0.doAfterBody();
        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
          break;
      } while (true);
    }
    if (_jspx_th_c_005fchoose_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      _005fjspx_005ftagPool_005fc_005fchoose.reuse(_jspx_th_c_005fchoose_005f0);
      throw new javax.servlet.jsp.SkipPageException();
    }
    _005fjspx_005ftagPool_005fc_005fchoose.reuse(_jspx_th_c_005fchoose_005f0);
    return false;
  }

  private boolean _jspx_meth_c_005fwhen_005f0(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fchoose_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:when
    org.apache.taglibs.standard.tag.rt.core.WhenTag _jspx_th_c_005fwhen_005f0 = (org.apache.taglibs.standard.tag.rt.core.WhenTag) _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.WhenTag.class);
    _jspx_th_c_005fwhen_005f0.setPageContext(_jspx_page_context);
    _jspx_th_c_005fwhen_005f0.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fchoose_005f0);
    // /jsp/report/home/home.jsp(12,4) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005fwhen_005f0.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${payload.docName == 'dianping'}", java.lang.Boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false)).booleanValue());
    int _jspx_eval_c_005fwhen_005f0 = _jspx_th_c_005fwhen_005f0.doStartTag();
    if (_jspx_eval_c_005fwhen_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
      do {
        out.write("\n");
        out.write("\t   \t\t");
        out.write("\n");
        out.write("<h4 class=\"text-success\">CAT总体介绍</h4>\n");
        out.write("<h5>CAT(Central Application Tracking)是基于Java开发的实时应用监控平台，为大众点评网提供了全面的监控服务和决策支持。\n");
        out.write("</h5>\n");
        out.write("<h5>CAT作为大众点评网基础监控组件，它已经在中间件框架（MVC框架，RPC框架，数据库框架，缓存框架等）中得到广泛应用，为点评各业务线提供系统的性能指标、健康状况、基础告警等。</h5>\n");
        out.write("</br>\n");
        out.write("<h4 class=\"text-success\">CAT目前现状</h4>\n");
        out.write("\t<ul>\n");
        out.write("\t\t<li>集成中间件产品（RPC、SQL、Cache等）</li>\n");
        out.write("\t\t<li>10台CAT物理监控集群</li>\n");
        out.write("\t\t<li>1000+ 业务应用（包括部分.net以及Job）</li>\n");
        out.write("\t\t<li>3000+ 应用服务器</li>\n");
        out.write("\t\t<li>30TB 消息，~250亿消息（每天）</li>\n");
        out.write("\t</ul>\n");
        out.write("\t<br/>\n");
        out.write("<h4 class=\"text-success\">CAT监控大盘</h4>\n");
        out.write("<div>\n");
        out.write("\t<a id=\"navmetricDashboard\" class=\"btn btn-sm btn-primary\" target=\"_blank\" href=\"/cat/r/top?op=view&domain=");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.domain}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("\">系统报错大盘</a>\n");
        out.write("\t<a id=\"navdashboard\" class=\"btn btn-sm btn-primary\" target=\"_blank\" href=\"/cat/r/dependency?op=dashboard&domain=");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.domain}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("\">应用监控大盘</a>\n");
        out.write("\t<a id=\"navbussiness\" class=\"btn btn-sm btn-primary\" target=\"_blank\" href=\"/cat/r/metric?op=dashboard&domain=");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.domain}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("\">业务监控大盘</a>\n");
        out.write("\t<a id=\"navbussiness\" class=\"btn btn-sm btn-primary\" target=\"_blank\" href=\"/cat/r/network?op=dashboard&domain=");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.domain}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("\">网络监控大盘</a>\n");
        out.write("\t<a id=\"navbussiness\" class=\"btn btn-sm btn-primary\" target=\"_blank\" href=\"/cat/r/storage?op=dashboard&domain=");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.domain}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("\">数据库监控大盘</a>\n");
        out.write("</div>\n");
        out.write("</br>\n");
        out.write("<h4 class=\"text-success\">CAT其他环境</h4>\n");
        out.write("<div>\n");
        out.write("\t<a class=\"btn btn-sm btn-primary\" href=\"http://cat.qa.dianpingoa.com/cat/r/\">测试环境</a>\n");
        out.write("\t<a class=\"btn btn-sm btn-primary\" href=\"http://ppe.cat.dp/cat/r/\">PPE环境</a>\n");
        out.write("\t<a class=\"btn btn-sm btn-primary\" href=\"http://cat.dianpingoa.com/cat/r/\">生产环境</a>\n");
        out.write("</div>\n");
        out.write("</br>\n");
        out.write("<h4 class=\"text-danger\">更多接入公司，欢迎在<a href=\"https://github.com/dianping/cat/issues/753\" target=\"_blank\">登记！</a></h4>\n");
        out.write("<table>\n");
        out.write("\t<tr>\n");
        out.write("\t\t<td><a target=\"_blank\" href=\"http://www.dianping.com/\"><img  class=\"img-polaroid\"  src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/logo/dianping.png\"/></a></td>\n");
        out.write("\t\t<td><a target=\"_blank\" href=\"http://www.ctrip.com/\"><img  class=\"img-polaroid\"  src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/logo/ctrip.png\"/></a></td>\n");
        out.write("\t\t<td><a target=\"_blank\" href=\"https://www.lufax.com/\"><img  class=\"img-polaroid\"  src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/logo/lufax.png\"/></a></td>\n");
        out.write("\t\t<td><a target=\"_blank\" href=\"http://www.ly.com/\"><img  class=\"img-polaroid\"  src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/logo/ly.png\"/></a></td>\n");
        out.write("\t</tr>\n");
        out.write("\t<tr>\n");
        out.write("\t\t<td><a target=\"_blank\" href=\"http://www.liepin.com/\"><img  class=\"img-polaroid\"  src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/logo/liepin.png\"/></a></td>\n");
        out.write("\t\t<td><a target=\"_blank\" href=\"http://www.qipeipu.com/\"><img  class=\"img-polaroid\"  src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/logo/qipeipu.jpg\"/></a></td>\n");
        out.write("\t\t<td><a target=\"_blank\" href=\"http://www.shangpin.com/\"><img  class=\"img-polaroid\"  src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/logo/shangping.jpg\"/></a></td>\n");
        out.write("\t\t<td><a target=\"_blank\" href=\"http://www.travelzen.com/flight/\"><img  class=\"img-polaroid\"  src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/logo/zhenlv.png\"/></a></td>\n");
        out.write("\t\t<td></td>\n");
        out.write("\t</tr>\n");
        out.write("\t<tr>\n");
        out.write("\t\t<td><a target=\"_blank\" href=\"http://www.oppo.com/\"><img  class=\"img-polaroid\"  src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/logo/oppo.png\"/></a></td>\n");
        out.write("\t</tr>\n");
        out.write("</table>\n");
        out.write("\n");
        out.write("\t   \t");
        int evalDoAfterBody = _jspx_th_c_005fwhen_005f0.doAfterBody();
        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
          break;
      } while (true);
    }
    if (_jspx_th_c_005fwhen_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.reuse(_jspx_th_c_005fwhen_005f0);
      throw new javax.servlet.jsp.SkipPageException();
    }
    _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.reuse(_jspx_th_c_005fwhen_005f0);
    return false;
  }

  private boolean _jspx_meth_c_005fwhen_005f1(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fchoose_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:when
    org.apache.taglibs.standard.tag.rt.core.WhenTag _jspx_th_c_005fwhen_005f1 = (org.apache.taglibs.standard.tag.rt.core.WhenTag) _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.WhenTag.class);
    _jspx_th_c_005fwhen_005f1.setPageContext(_jspx_page_context);
    _jspx_th_c_005fwhen_005f1.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fchoose_005f0);
    // /jsp/report/home/home.jsp(15,5) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005fwhen_005f1.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${payload.docName == 'release'}", java.lang.Boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false)).booleanValue());
    int _jspx_eval_c_005fwhen_005f1 = _jspx_th_c_005fwhen_005f1.doStartTag();
    if (_jspx_eval_c_005fwhen_005f1 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
      do {
        out.write("\n");
        out.write("\t   \t\t");
        out.write("\n");
        out.write("<table class='table table-bordered table-striped table-condensed  '>\n");
        out.write("\t<tr class=\"text-success\"><th width=\"8%\">版本</th><th width=\"82%\">说明</th><th width=\"10%\">发布时间</th></tr>\n");
        out.write("\t<tr><td>1.2.8</td><td>1、合并单独的Event，Metric等原子消息，减少消息总量。修复了启动时候连接服务端的bug。</td><td>2014-12-09</td></tr>\n");
        out.write("\t<tr><td>1.1.9</td><td>1、修复了消息截断时候，统计时间的bug</td><td>2014-12-09</td></tr>\n");
        out.write("\t<tr><td>1.1.5</td><td>1、修复了CAT初始化路由出错导致监控信息丢失的bug</td><td>2014-11-21</td></tr>\n");
        out.write("\t<tr><td>1.1.2</td><td>1、动态配置CAT的路由策略，支持统一项目名调整</td><td>2014-08-02</td></tr>\n");
        out.write("\t<tr><td>1.0.1</td><td>1、将ABtest的功能从监控中分离</td><td>2014-01-02</td></tr>\n");
        out.write("\t<tr><td>1.0.0</td><td>1、修复了CAT监控初始化当服务端都出异常的状况，不会自动连接的Bug</td><td>2013-12-20</td></tr>\n");
        out.write("\t<tr><td>0.6.2</td><td>1、支持java job的监控，优化了cat的API</td><td>2013-08-06</td></tr>\n");
        out.write("\t<tr><td>0.6.1</td><td>1、cat客户端的消息长度设置了子消息的最大长度（500），多的消息直接丢弃，以防止内存过大的CAT消息内存泄露</td><td>2013-06-06</td></tr>\n");
        out.write("\t<tr><td>0.6.0</td><td>1、增加业务监控埋点API。2、修复时间戳调整bug。3、修复classpath获取bug。4、修复CatFilter支持Forward请求</td><td>2013-03-26</td></tr>\n");
        out.write("\t<tr><td>0.4.1</td><td>1、默认禁止心跳线程获取线程锁信息，以降低对业务线程的影响。</td><td>2012-09-06</td></tr>\n");
        out.write("\t<tr><td>0.4.0</td><td>1、支持开关动态关闭。2、后端存储重构，支持分布式Logview的查看(关联pigeon的call)。</td><td>2012-08-20</td></tr>\n");
        out.write("\t<tr><td>0.3.4</td><td>1、规范了CAT客户端的日志。2、规范了后台模块的加载顺序。3、统一服务端配置存取。4、新增心跳报表的Http线程 </td><td>2012-07-25</td></tr>\n");
        out.write("\t<tr><td>0.3.3</td><td>1、修改CAT线程为后台Dameon线程。2、减少CAT的日志输出。3、修复了极端情况客户端丢失部分消息。4、支持CAT的延迟加载。5、修复了0.3.2一个getLog的bug</td><td>2012-07-17</td></tr>\n");
        out.write("\t<tr><td>0.3.2</td><td>1、修复了配置单个服务器时候，服务器重启，客户端断开链接bug。2、修复了CAT不正常加载时候，内存溢出的问题。（此版本有问题，请更新至0.3.3）</td><td>2012-07-01</td></tr>\n");
        out.write("\t<tr><td>0.3.1</td><td>1、修复CAT在业务testcase的使用，支持业务运行Testcase在Console上看到运行情况。</td><td>2012-06-25</td></tr>\n");
        out.write("\t<tr><td>0.3.0</td><td>1、修复CAT在Transaction Name的Nullpoint异常。</td><td>2012-06-15</td></tr>\n");
        out.write("\t<tr><td>0.2.5</td><td>1、心跳消息监控新增oldgc和newgc  2、更新了ThreadLocal的线程模型（修复了一些无头消息和部分错乱消息）</td><td>2012-05-01</td></tr>\n");
        out.write("</table>\n");
        out.write("\n");
        out.write("\n");
        out.write("\t   \t");
        int evalDoAfterBody = _jspx_th_c_005fwhen_005f1.doAfterBody();
        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
          break;
      } while (true);
    }
    if (_jspx_th_c_005fwhen_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.reuse(_jspx_th_c_005fwhen_005f1);
      throw new javax.servlet.jsp.SkipPageException();
    }
    _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.reuse(_jspx_th_c_005fwhen_005f1);
    return false;
  }

  private boolean _jspx_meth_c_005fwhen_005f2(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fchoose_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:when
    org.apache.taglibs.standard.tag.rt.core.WhenTag _jspx_th_c_005fwhen_005f2 = (org.apache.taglibs.standard.tag.rt.core.WhenTag) _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.WhenTag.class);
    _jspx_th_c_005fwhen_005f2.setPageContext(_jspx_page_context);
    _jspx_th_c_005fwhen_005f2.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fchoose_005f0);
    // /jsp/report/home/home.jsp(18,5) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005fwhen_005f2.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${payload.docName == 'deploy'}", java.lang.Boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false)).booleanValue());
    int _jspx_eval_c_005fwhen_005f2 = _jspx_th_c_005fwhen_005f2.doStartTag();
    if (_jspx_eval_c_005fwhen_005f2 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
      do {
        out.write("\n");
        out.write("\t   \t\t");
        out.write("\n");
        out.write("<h4 class=\"text-success\">生产环境部署</h4>\n");
        out.write("<p>1、配置生产环境数据库，数据库脚本在资源文件 scrip/Cat.sql。</p>\n");
        out.write("<p>2、准备N台cat服务器，比如3台，ip为10.1.1.1，10.1.1.2，10.1.1.3。</p>\n");
        out.write("<p>3、在所有cat服务器上安装tomcat，启动端口默认设定为8080。</p>\n");
        out.write("<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tomcat启动参数参考：-Xms20288m -Xmx20288m -XX:PermSize=256m -XX:MaxPermSize=256m -XX:NewSize=10144m -XX:MaxNewSize=10144m -XX:SurvivorRatio=10</p>\n");
        out.write("<p>4、确保所有cat客户端以及服务器对于/data目录具有读写权限。</p>\n");
        out.write("<p>5、配置所有客户端和服务端的配置文件client.xml，文件路径/data/appdatas/cat/client.xml。</p>\n");
        out.write("<xmp class=\"well\">\n");
        out.write("\t<config mode=\"client\">\n");
        out.write("\t    \t<servers>\n");
        out.write("\t                <server ip=\"10.1.1.1\" port=\"2280\" http-port=\"8080\"/>\n");
        out.write("\t                <server ip=\"10.1.1.2\" port=\"2280\" http-port=\"8080\"/>\n");
        out.write("\t                <server ip=\"10.1.1.3\" port=\"2280\" http-port=\"8080\"/>\n");
        out.write("\t    \t</servers>\n");
        out.write("\t</config>\n");
        out.write("</xmp>\n");
        out.write("<p>6、配置服务端的数据库配置datasources.xml，文件路径/data/appdatas/cat/datasources.xml,需要替换对应的线上配置。</p>\n");
        out.write("<xmp class=\"well\">\n");
        out.write("<data-sources>\n");
        out.write("\t<data-source id=\"cat\">\n");
        out.write("\t\t<maximum-pool-size>3</maximum-pool-size>\n");
        out.write("\t\t<connection-timeout>1s</connection-timeout>\n");
        out.write("\t\t<idle-timeout>10m</idle-timeout>\n");
        out.write("\t\t<statement-cache-size>1000</statement-cache-size>\n");
        out.write("\t\t<properties>\n");
        out.write("\t\t\t<driver>com.mysql.jdbc.Driver</driver>\n");
        out.write("\t\t\t<url><![CDATA[{jdbc.url}]]></url>\n");
        out.write("\t\t\t<user>{jdbc.user}</user>\n");
        out.write("\t\t\t<password>{jdbc.password}</password>\n");
        out.write("\t\t\t<connectionProperties><![CDATA[useUnicode=true&autoReconnect=true]]></connectionProperties>\n");
        out.write("\t\t</properties>\n");
        out.write("\t</data-source>\n");
        out.write("\t<data-source id=\"app\">\n");
        out.write("\t\t<maximum-pool-size>3</maximum-pool-size>\n");
        out.write("\t\t<connection-timeout>1s</connection-timeout>\n");
        out.write("\t\t<idle-timeout>10m</idle-timeout>\n");
        out.write("\t\t<statement-cache-size>1000</statement-cache-size>\n");
        out.write("\t\t<properties>\n");
        out.write("\t\t\t<driver>com.mysql.jdbc.Driver</driver>\n");
        out.write("\t\t\t<url><![CDATA[{jdbc.url}]]></url>\n");
        out.write("\t\t\t<user>{jdbc.user}</user>\n");
        out.write("\t\t\t<password>{jdbc.password}</password>\n");
        out.write("\t\t\t<connectionProperties><![CDATA[useUnicode=true&autoReconnect=true]]></connectionProperties>\n");
        out.write("\t\t</properties>\n");
        out.write("\t</data-source>\n");
        out.write("</data-sources>\n");
        out.write("</xmp> \n");
        out.write("<p>7、配置服务端的server.xml，文件路径/data/appdatas/cat/server.xml。</p>\n");
        out.write("<xmp class=\"well\">\n");
        out.write("<!-- Configuration for production environment -->\n");
        out.write("<!-- Note: -->\n");
        out.write("<!-- 1. Set local-mode false to activate remote mode. -->\n");
        out.write("<!-- 2. If machine is job-machine, set job-machine true, you just need config only one machine. Job is offline for report aggreation, statistics report.-->\n");
        out.write("<!-- 3. If machine is alert-machine, set alert-machine true, you just need config only one machine. -->\n");
        out.write("<!-- 4. Cat can run without hdfs, you just config hdfs-machine false. If you have hdfs, you can config hdfs info for saving the logview info.  -->\n");
        out.write("<!-- 5. If you don't need hdfs, the logview will be stored in local disk. You can config max local-logivew-storage-time for cleaning up old logview, the unit is day. -->\n");
        out.write("<!-- 6. Please set hadoop environment accordingly. -->\n");
        out.write("<!-- 7. Please set ldap info for login the system. -->\n");
        out.write("<!-- 8. Please config remote-server if you have many cat servers. -->\n");
        out.write("<config local-mode=\"false\" hdfs-machine=\"false\" job-machine=\"false\" alert-machine=\"false\">\n");
        out.write("\t<storage  local-base-dir=\"/data/appdatas/cat/bucket/\" max-hdfs-storage-time=\"15\" local-report-storage-time=\"7\" local-logivew-storage-time=\"7\">\n");
        out.write("\t\t<hdfs id=\"logview\" max-size=\"128M\" server-uri=\"hdfs://10.1.77.86/user/cat\" base-dir=\"logview\"/>\n");
        out.write("\t\t<hdfs id=\"dump\" max-size=\"128M\" server-uri=\"hdfs://10.1.77.86/user/cat\" base-dir=\"dump\"/>\n");
        out.write("\t\t<hdfs id=\"remote\" max-size=\"128M\" server-uri=\"hdfs://10.1.77.86/user/cat\" base-dir=\"remote\"/>\n");
        out.write("\t</storage>\n");
        out.write("\t<console default-domain=\"Cat\" show-cat-domain=\"true\">\n");
        out.write("\t\t<remote-servers>10.1.1.1:8080,10.1.1.2:8080,10.1.1.3:8080</remote-servers>\t\t\n");
        out.write("\t</console>\n");
        out.write("\t<ldap ldapUrl=\"ldap://192.168.50.11:389/DC=dianpingoa,DC=com\"/>\n");
        out.write("</config>\n");
        out.write("</xmp>\n");
        out.write("<p>9、启动一台服务端10.1.1.1，修改服务端路由文件，url地址 http://10.1.1.1:8080/cat/s/config?op=routerConfigUpdate</p>\n");
        out.write("<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;需要用户名密码登陆，如果配置ldap即可直接登陆，或者用默认账号catadmin/catadmin登陆。</p>\n");
        out.write("<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;可以将10.1.1.1 部署为提供内部访问，并设置job-machine=true，alert-machine=true，让这台机器进行后续job以及告警处理，这些都可能影响到consumer性能。</p>\n");
        out.write("<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;将10.1.1.2,10.1.1.3 处理全部监控请求，如果后续需要扩容，可以直接添加default-server的节点。</p>\n");
        out.write("<xmp class=\"well\">\n");
        out.write("<?xml version=\"1.0\" encoding=\"utf-8\"?>\n");
        out.write("<router-config backup-server=\"10.1.1.1\" backup-server-port=\"2280\">\n");
        out.write("   <default-server id=\"10.1.1.2\" port=\"2280\" enable=\"true\"/>\n");
        out.write("   <default-server id=\"10.1.1.3\" port=\"2280\" enable=\"true\"/>\n");
        out.write("</router-config>\n");
        out.write("</xmp>\n");
        out.write("<p>10、客户端集成，请参考集成文档</p>");
        out.write("\n");
        out.write("\t   \t");
        int evalDoAfterBody = _jspx_th_c_005fwhen_005f2.doAfterBody();
        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
          break;
      } while (true);
    }
    if (_jspx_th_c_005fwhen_005f2.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.reuse(_jspx_th_c_005fwhen_005f2);
      throw new javax.servlet.jsp.SkipPageException();
    }
    _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.reuse(_jspx_th_c_005fwhen_005f2);
    return false;
  }

  private boolean _jspx_meth_c_005fwhen_005f3(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fchoose_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:when
    org.apache.taglibs.standard.tag.rt.core.WhenTag _jspx_th_c_005fwhen_005f3 = (org.apache.taglibs.standard.tag.rt.core.WhenTag) _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.WhenTag.class);
    _jspx_th_c_005fwhen_005f3.setPageContext(_jspx_page_context);
    _jspx_th_c_005fwhen_005f3.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fchoose_005f0);
    // /jsp/report/home/home.jsp(21,5) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005fwhen_005f3.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${payload.docName == 'integration'}", java.lang.Boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false)).booleanValue());
    int _jspx_eval_c_005fwhen_005f3 = _jspx_th_c_005fwhen_005f3.doStartTag();
    if (_jspx_eval_c_005fwhen_005f3 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
      do {
        out.write("\n");
        out.write("\t   \t\t");
        out.write("\n");
        out.write("\n");
        out.write("\n");
        out.write("<dl>\n");
        out.write("  <dt><h5 class=\"text-success\">1.Web.xml中新增filter</h5></dt>\n");
        out.write("  <dd><p class=\"detailContent\">注：如果项目是对外不提供URL访问，比如GroupService，仅仅提供Pigeon服务，则不需要。</p>\n");
        out.write("\t<h5 class=\"text-danger detailContent\"><strong>Filter放在url-rewrite-filter 之后的第一个，如果不是会导致URL的个数无限多，比如search/1/2,search/2/3等等，无法监控，后端存储压力也变大。</strong></h5>\n");
        out.write("\t<xmp class=\"well\">\n");
        out.write("    <filter>\n");
        out.write("        <filter-name>cat-filter</filter-name>\n");
        out.write("        <filter-class>com.dianping.cat.servlet.CatFilter</filter-class>\n");
        out.write("    </filter>\n");
        out.write("    <filter-mapping>\n");
        out.write("        <filter-name>cat-filter</filter-name>\n");
        out.write("        <url-pattern>/*</url-pattern>\n");
        out.write("        <dispatcher>REQUEST</dispatcher>\n");
        out.write("        <dispatcher>FORWARD</dispatcher>\n");
        out.write("    </filter-mapping>\n");
        out.write("\t</xmp>\n");
        out.write("  </dd>\n");
        out.write("\t  <h5 class=\"text-danger\">struts会吃掉URL中的ERROR信息，请在配置中加\n");
        out.write("\t  \t<xmp class=\"well\"> <constant name=\"struts.handle.exception\" value=\"false\" /> \n");
        out.write("\t  \t</xmp>\n");
        out.write("\t  </h5>\n");
        out.write("\t  <h5 class=\"text-danger\">解决URL中很多重复的问题，比如restfull的url</h5>\n");
        out.write("\t    <xmp class=\"well\">\n");
        out.write("\t    \tCAT 提供了自定义的URL的name功能，只要在HttpServletRequest的设置一个Attribute，\n");
        out.write("\t    \t在业务运行代码中加入如下code可以自定义URL下name，这样可以进行自动聚合。\n");
        out.write("\t    \tHttpServletRequest req ;\n");
        out.write("\t    \treq.setAttribute(\"cat-page-uri\", \"myPageName\");\n");
        out.write("\t    </xmp>\n");
        out.write("\t\n");
        out.write("  <dt><h5 class=\"text-success\">2.Pom.xml中更新jar包(点评内部公共组件，外部公司可以忽略)</h5></dt>\n");
        out.write("  <dd>\n");
        out.write("  <xmp class=\"well\">\n");
        out.write("       <dependency>\n");
        out.write("            <groupId>com.dianping.cat</groupId>\n");
        out.write("            <artifactId>cat-core</artifactId>   \n");
        out.write("            <version>1.2.7</version>\n");
        out.write("       </dependency>\n");
        out.write("  </xmp>\n");
        out.write("  </dd>\n");
        out.write("  <dt><h5 class=\"text-success\">3、配置domain (cat-core 1.1.3之后版本，优先读取A配置)</h5></dt>\n");
        out.write("   <p class=\"text-danger\">A) 在资源文件中新建app.properties文件</p>\n");
        out.write("   <dd><p class=\"detailContent\">在resources资源文件META-INF下，注意是<span class=\"text-danger\">src/main/resources/META-INF/</span>文件夹，\n");
        out.write("  而不是<span class=\"text-danger\">webapps下的那个META-INF</span>,添加<span class=\"text-danger\">app.properties</span>，加上domain配置，如：<span class=\"text-danger\">app.name=tuangou-web</span></p>\n");
        out.write("  <p class=\"text-danger\"> B) 在资源文件中新建client.xml文件</p>\n");
        out.write("  <dd><p class=\"detailContent\">在resources资源文件META-INF下，新建cat文件夹，注意是<span class=\"text-danger\">src/main/resources/META-INF/cat/client.xml</span>文件，\n");
        out.write("  而不是<span class=\"text-danger\">webapps下的那个META-INF</span>,domain id表示项目名称<span class=\"text-danger\">此处为CMDB申请的名字，比如</span></p>\n");
        out.write("  <xmp class=\"well\">\n");
        out.write("     <config mode=\"client\">\n");
        out.write("         <domain id=\"tuangou-web\"/>\n");
        out.write("     </config>\n");
        out.write("  </xmp>\n");
        out.write("  </dd>\n");
        out.write("  <dt><h5 class=\"text-success\">4./data/appdatas/cat/目录下，新建一个client.xml文件(线上环境是OP配置)</h5></dt>\n");
        out.write("  <dd>\n");
        out.write("  <p class=\"detailContent\">如果系统是windows环境，则在eclipse运行的盘，比如D盘，新建/data/appdatas/cat/目录，新建client.xml文件</p>\n");
        out.write("\t\n");
        out.write("  <p>项目文件中srouce中的client.xml,此文件代表了这个项目我是谁,比如项目的名字Cat。</p>\n");
        out.write("  <p>/data/appdatas/cat/client.xml,此文件有OP控制,这里的Domain名字用来做开关，如果一台机器上部署了多个应用，可以指定把一个应用的监控关闭。</p>\n");
        out.write("  \n");
        out.write("  <xmp class=\"well\">\n");
        out.write("      <config mode=\"client\">\n");
        out.write("          <servers>\n");
        out.write("             <server ip=\"192.168.213.115\" port=\"2280\" />\n");
        out.write("         </servers>\n");
        out.write("      </config>\n");
        out.write("  </xmp>\n");
        out.write("  <p class=\"text-danger\">alpha、beta这个配置需要自己在此目录添加</p>\n");
        out.write("  <p class=\"text-danger\">预发以及生产环境这个配置需要通知到对应OP团队，让他们统一添加，自己上线时候做下检查即可</p>\n");
        out.write("  <p>a、192.168.213.115:2280端口是指向测试环境的cat地址</p>\n");
        out.write("  <p>b、<span class=\"text-danger\">配置可以加入CAT的开关，用于关闭CAT消息发送,将enabled改为false，如下表示将mobile-api这个项目关闭</span></p>\n");
        out.write("  <xmp>\n");
        out.write("  \t<config mode=\"client\">\n");
        out.write("          <servers>\n");
        out.write("             <server ip=\"192.168.213.115\" port=\"2280\" />\n");
        out.write("         </servers>\n");
        out.write("         <domain id=\"mobile-api\" enabled=\"false\"/>\n");
        out.write("      </config>\n");
        out.write("  </xmp>\n");
        out.write("  </dd>\n");
        out.write("  <dt><h5 class=\"text-success\">5.CAT的Log4j集成 【建议所有Log都打到CAT，这样才能更快发现问题】</h5></dt>\n");
        out.write("  <dd><p class=\"detailContent text-danger\">业务程序的所有异常都通过记录到CAT中，方便看到业务程序的问题，建议在Root节点中添加次appendar</p>\n");
        out.write("  <p>a）在Log4j的xml中，加入Cat的Appender></p>\n");
        out.write("  <xmp class=\"well\">\n");
        out.write("    <appender name=\"catAppender\" class=\"com.dianping.cat.log4j.CatAppender\"></appender>\n");
        out.write("  </xmp>\n");
        out.write("  <p>b）在Root的节点中加入catAppender</p>\n");
        out.write("  <xmp class=\"well\">\n");
        out.write("     <root>\n");
        out.write("       <level value=\"error\" />\n");
        out.write("       <appender-ref ref=\"catAppender\" />\n");
        out.write("     </root>\n");
        out.write("  </xmp>\n");
        out.write("  <p class=\"text-danger\">c）注意有一些Log的是不继承root的，需要如下配置</p>\n");
        out.write("  <xmp class=\"well\">\n");
        out.write("      <logger name=\"com.dianping.api.location\" additivity=\"false\">\n");
        out.write("        <level value=\"INFO\"/>\n");
        out.write("        <appender-ref ref=\"locationAppender\"/>\n");
        out.write("        <appender-ref ref=\"catAppender\"/>\n");
        out.write("      </logger>\n");
        out.write("  </xmp>\n");
        out.write("  </dd>\n");
        out.write("</dl>\n");
        out.write("\n");
        out.write("\n");
        out.write("\t   \t");
        int evalDoAfterBody = _jspx_th_c_005fwhen_005f3.doAfterBody();
        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
          break;
      } while (true);
    }
    if (_jspx_th_c_005fwhen_005f3.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.reuse(_jspx_th_c_005fwhen_005f3);
      throw new javax.servlet.jsp.SkipPageException();
    }
    _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.reuse(_jspx_th_c_005fwhen_005f3);
    return false;
  }

  private boolean _jspx_meth_c_005fwhen_005f4(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fchoose_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:when
    org.apache.taglibs.standard.tag.rt.core.WhenTag _jspx_th_c_005fwhen_005f4 = (org.apache.taglibs.standard.tag.rt.core.WhenTag) _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.WhenTag.class);
    _jspx_th_c_005fwhen_005f4.setPageContext(_jspx_page_context);
    _jspx_th_c_005fwhen_005f4.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fchoose_005f0);
    // /jsp/report/home/home.jsp(24,5) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005fwhen_005f4.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${payload.docName == 'user'}", java.lang.Boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false)).booleanValue());
    int _jspx_eval_c_005fwhen_005f4 = _jspx_th_c_005fwhen_005f4.doStartTag();
    if (_jspx_eval_c_005fwhen_005f4 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
      do {
        out.write("\n");
        out.write("\t   \t\t");
        out.write("\n");
        out.write("<div class=\"tabbable\"> <!-- Only required for left/right tabs -->\n");
        out.write("  <ul class=\"nav nav-tabs padding-12 tab-color-blue background-blue\" style=\"height: 50px;\">\n");
        out.write("    <li class=\"active\"><a href=\"#userDocoument1\" data-toggle=\"tab\"><strong>Overall</strong></a></li>\n");
        out.write("    <li><a href=\"#userDocoument2\" data-toggle=\"tab\"><strong>Logview</strong></a></a></li>\n");
        out.write("    <li><a href=\"#userDocoument3\" data-toggle=\"tab\"><strong>Report</strong></a></a></li>\n");
        out.write("    <li><a href=\"#userDocoument4\" data-toggle=\"tab\"><strong>Transaction</strong></a></a></li>\n");
        out.write("    <li><a href=\"#userDocoument5\" data-toggle=\"tab\"><strong>Event</strong></a></a></li>\n");
        out.write("    <li><a href=\"#userDocoument6\" data-toggle=\"tab\"><strong>Problem</strong></a></a></li>\n");
        out.write("    <li><a href=\"#userDocoument7\" data-toggle=\"tab\"><strong>Heartbeat</strong></a></a></li>\n");
        out.write("    <li><a href=\"#userDocoument8\" data-toggle=\"tab\"><strong>Cross</strong></a></a></li>\n");
        out.write("    <li><a href=\"#userDocoument9\" data-toggle=\"tab\"><strong>Matrix</strong></a></a></li>\n");
        out.write("    <li><a href=\"#userDocoument10\" data-toggle=\"tab\"><strong>Metric</strong></a></a></li>\n");
        out.write("    <li><a href=\"#userDocoument11\" data-toggle=\"tab\"><strong>Dependency</strong></a></a></li>\n");
        out.write("    <li><a href=\"#userDocoument12\" data-toggle=\"tab\"><strong>Storage</strong></a></a></li>\n");
        out.write("  </ul>\n");
        out.write("  <div class=\"tab-content\">\n");
        out.write("    <div class=\"tab-pane active\" id=\"userDocoument1\">");
        out.write("\r\n");
        out.write("\r\n");
        out.write("<h4 class=\"text-success\">实时导航介绍</h4>\r\n");
        out.write("<img  class=\"img-polaroid\"  src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/overall01.png\" style=\"width:520px;\"/>\r\n");
        out.write("<p>  CAT监控数据实时数据是以小时为单位，如果当前报表是表示5月7号10点- 11点的数据报表，导航链接表示为：</p>\r\n");
        out.write("<p>1. -1d就是表示5月6号10点-11点的数据（上一天这个小时数据）</p>\r\n");
        out.write("<p>2. -2h就是表示5月7号9点-10点的数据 （上两个小时数据）</p>\r\n");
        out.write("<p>3. -1h就是表示5月7号10点-11点的数据 （上一个小时数据）</p>\r\n");
        out.write("<p>4. +1h就是表示5月7号10点-11点的数据 （下一个小时数据）</p>\r\n");
        out.write("<p>5. +2h就是表示5月7号10点-11点的数据 （下两个小时数据）</p>\r\n");
        out.write("<p>6. +1d就是表示5月7号10点-11点的数据 （下一天这个小时数据</p>\r\n");
        out.write("<p class=\"text-danger\">注：如果-1h、-1d超过了当前系统时间，直接跳转到最新的一个小时实时数据。</p>\r\n");
        out.write("<h4 class=\"text-success\">历史导航介绍</h4>\r\n");
        out.write("<p>点击导航中间的<span class=\"text-danger\"><strong>“History Mode”</strong></span>便可进入相应的历史报表界面。</p>\r\n");
        out.write("<img  class=\"img-polaroid\"  src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/overall02.png\" style=\"width:520px;\"/>\r\n");
        out.write("<p>历史报表目前分为三类：日报表、周报表、月报表。当首次选择day、week、month时，默认为当前最近的一天、一周、一个月。以2012年6月28日14：50为例：</p>\r\n");
        out.write("<p>①　当选择day时，出现的历史报表则为2012-06-28 00:00:00 to 2012-06-29 00:00:00。可以通过-1d和+1d增加一天或者减少一天。如以前实时报表一样，如果+1d时，超出了当前的最大日期，则默认为当前最近的一天。</p>\r\n");
        out.write("<p>②　当选择week时，则出现的历史报表为：2012-06-25 00:00:00 to 2012-07-03 00:00:00。（周报表以七天为一周期，默认为上周六到本周星期五）可以通过-1w和+1w增加一天或者减少一周。如以前实时报表一样，如果+1w时，超出了当前的最大日期，则默认为当前最近的一周。</p>\r\n");
        out.write("<p>③　当选择month时，则历史报表的为：2012-06-01 00:00:00 to 2012-07-01 00:00:00。可以通过-1m和+1m增加一天或者减少一月。如以前实时报表一样，如果+1m时，超出了当前的最大日期，则默认为当前最近的一月。</p>\r\n");
        out.write("<p class=\"text-danger\">注：页面暂时不支持特定时间区间的报表查询，如果想查询特定连续时间的统计情况，可以加入URL参数输入条件，参数为 &startDate=20120712&endDate=20120715，它表示查询7月12号0点-7月15号0点这段期间的统计数据。</p>");
        out.write("</div>\n");
        out.write("    <div class=\"tab-pane\" id=\"userDocoument2\">");
        out.write("\n");
        out.write("<h4 class=\"text-success\">Logview总体介绍</h4>\n");
        out.write("<img  class=\"img-polaroid\"  src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/logviewAll01.png\"/>\n");
        out.write("<h4 class=\"text-success\">可视化Logview</h4>\n");
        out.write("<img  class=\"img-polaroid\"  src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/logviewAll02.png\"/>\n");
        out.write("<h4 class=\"text-success\">分布式Logview</h4>\n");
        out.write("<img  class=\"img-polaroid\"  src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/logviewAll03.png\"/>\n");
        out.write("<h4 class=\"text-success\">Transaction</h4>\n");
        out.write("<p>a）Tansaction元素包括开始时间、结束时间、类型（type）、名称（name）、状态、处理时间、以及记录的数据（data）。</p>\n");
        out.write("<img  class=\"img-polaroid\"  src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/logview01.jpg\"/>\n");
        out.write("<p>b）Transctio成功状态默认不显示，下图就是失败状态，用红色表示，此状态一般记录为异常。</p>\n");
        out.write("<img  class=\"img-polaroid\"  src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/logview02.jpg\"/>\n");
        out.write("<p>c）Transaction是有执行时间的，它里面可以嵌套其他的Transaction，Event。</p>\n");
        out.write("<img  class=\"img-polaroid\"  src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/logview03.jpg\"/>\n");
        out.write("<h4 class=\"text-success\">Event</h4>\n");
        out.write("<p>Event元素包括开始时间、类型（type）、名称（name）、状态以及数据（data）。</p>\n");
        out.write("<img  class=\"img-polaroid\"  src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/logview04.jpg\"/>\n");
        out.write("<h4 class=\"text-success\">Heartbeat</h4>\n");
        out.write("<p>Heartbeat元素包括开始时间、类型（type）、名称（name）、状态以及数据（data）。</p>\n");
        out.write("<img  class=\"img-polaroid\"  src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/logview05.jpg\"/>\n");
        out.write("</div>\n");
        out.write("    <div class=\"tab-pane\" id=\"userDocoument3\">");
        out.write("\n");
        out.write("<h4 class=\"text-success\">Transaction实时报表</h4>\n");
        out.write("\t一段代码运行时间、次数，比如URL、Cache、SQL执行次数和响应时间\n");
        out.write("<br>\n");
        out.write("<h4 class=\"text-success\">Event实时报表</h4>\n");
        out.write("\t一行代码运行次数，比如出现一个异常\n");
        out.write("<br>\n");
        out.write("<h4 class=\"text-success\">Problem实时报表</h4>\n");
        out.write("\t根据Transaction\\Event数据分析出来系统可能出现的异常，包括访问较慢的程序等\n");
        out.write("<br>\n");
        out.write("<h4 class=\"text-success\">Heartbeat实时报表</h4>\n");
        out.write("\tJVM内部一些状态信息，Memory，Thread等\n");
        out.write("<br>\n");
        out.write("<h4 class=\"text-success\">Dependency实时报表</h4>\n");
        out.write("\t系统之间实时调用数据信息，包括远程服务、数据库、缓存等\n");
        out.write("<br>\n");
        out.write("<h4 class=\"text-success\">Metric实时报表</h4>\n");
        out.write("\t业务监控报表\n");
        out.write("<br>\n");
        out.write("<h4 class=\"text-success\">Matrix实时报表</h4>\n");
        out.write("\t一个请求调用链路统计（一次请求中调用多少次SQL、PRC、Cache等）\n");
        out.write("<br>\n");
        out.write("<h4 class=\"text-success\">Cross实时报表</h4>\n");
        out.write("\tSOA系统用关于RPC调用的报表(支持粒度服务、IP、方法)\n");
        out.write("<br>\n");
        out.write("<h4 class=\"text-success\">State实时报表</h4>\n");
        out.write("\tCAT自身状态监控，包括处理消息数、丢失消息\n");
        out.write("<br>\n");
        out.write("<h4 class=\"text-success\">Storage实时报表</h4>\n");
        out.write("\t数据库以及CACHE状态监控，包括访问量，访问延时，错误量，长时间访问量等\n");
        out.write("<br>\n");
        out.write("\n");
        out.write("\n");
        out.write("</div>\n");
        out.write("    <div class=\"tab-pane\" id=\"userDocoument4\">");
        out.write("\r\n");
        out.write("<h4 class=\"text-success\">Storage实时报表</h4>\r\n");
        out.write("<h5>功能：监控一段代码运行情况：运行时间统计、次数、错误次数等等。系统默认的有URL、Cache、SQL、PigeonCall、PigeonService</h5>\r\n");
        out.write("<p class=\"text-danger\">由于计算95line需要数据较多，为了减少内存开销，系统做了一些优化，在单个小时内某一台机器，95Line误差是1ms，但是合并成1一天，1周，1个月误差较大（数据仅供参考）</p>\r\n");
        out.write("<h5 class=\"text-sucess\">a）Type统计界面</h5>\r\n");
        out.write("<img  class=\"img-polaroid\"  src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/transaction01.jpg\"/>\r\n");
        out.write("<h5 class=\"text-sucess\">b）Name统计界面</h5>\r\n");
        out.write("<img  class=\"img-polaroid\"  src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/transaction02.jpg\"/>\r\n");
        out.write("<h5 class=\"text-sucess\">c）一个小时内详细指标统计</h5>\r\n");
        out.write("<p>1. Duration Distribution表示transaction的执行时间分布，这个图可以看出，大部分shopcheckin是在16-64毫秒完成，还有很少部分在512-1024毫秒完成。</p>\r\n");
        out.write("<p>2. HitOverTime、Averager Duration Over Time,Failures Over Time 纵轴都是以5分钟为单位，HitOverTime表示5分钟内的访问次数。</p>\r\n");
        out.write("<p>3. Averager Duration Over Time表示5分钟内的平均处理时间。</p>\r\n");
        out.write("<p>4. Failures Over Time表示5分钟内的Transaction失败次数。</p>\r\n");
        out.write("<img  class=\"img-polaroid\"  src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/transaction03.png\" width=\"770px\"/>\r\n");
        out.write("<br/>\r\n");
        out.write("<h4 class=\"text-success\">Transaction历史统计报表</h4>\r\n");
        out.write("<p class=\"text-danger\">a）Transaction\\Event月报表支持每天的趋势图，以天为单位,如下图</p>\r\n");
        out.write("<img  class=\"img-polaroid\"  src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/transaction06.png\" width=\"770px\"/>\r\n");
        out.write("<p class=\"text-danger\">b）Transaction\\Event报表日报表、周报表支持同比、环比对比,时间精度为5分钟</p>\r\n");
        out.write("<img  class=\"img-polaroid\"  src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/transaction05.png\" width=\"770px\"/>");
        out.write("</div>\n");
        out.write("    <div class=\"tab-pane\" id=\"userDocoument5\">");
        out.write("\n");
        out.write("<h4 class=\"text-success\">Event实时报表</h4>\n");
        out.write("<h5>功能：记录程序中一个事件记录了多少次，错误了多少次。相比于Transaction，Event没有运行时间统计。</h5>\n");
        out.write("<h5 class=\"text-sucess\">a）Type统计界面</h5>\n");
        out.write("<img  class=\"img-polaroid\"  src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/event01.png\" width=\"770px\"/>\n");
        out.write("<h5 class=\"text-sucess\">b）Name统计界面</h5>\n");
        out.write("<img  class=\"img-polaroid\"  src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/event02.png\" width=\"770px\"/>\n");
        out.write("<h5 class=\"text-sucess\">c）一个小时内详细指标统计</h5>\n");
        out.write("<p>1. HitOverTime、Averager Duration Over Time,Failures Over Time 纵轴都是以5分钟为单位，HitOverTime表示5分钟内的访问次数。</p>\n");
        out.write("<p>2. Failures Over Time表示5分钟内的Transaction失败次数。</p>\n");
        out.write("<br/>\n");
        out.write("<img  class=\"img-polaroid\"  src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/event05.png\" width=\"100%\"/>\n");
        out.write("<h4 class=\"text-success\">Event历史报表</h4>\n");
        out.write("<p class=\"text-danger\">a）Transaction\\Event月报表支持每天的趋势图，以天为单位,如下图</p>\n");
        out.write("<img  class=\"img-polaroid\"  src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/event04.png\" width=\"100%\"/>\n");
        out.write("<p class=\"text-danger\">b）Transaction\\Event报表日报表、周报表支持同比、环比对比,时间精度为5分钟</p>\n");
        out.write("<img  class=\"img-polaroid\"  src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/event03.png\" width=\"100%\"/>");
        out.write("</div>\n");
        out.write("    <div class=\"tab-pane\" id=\"userDocoument6\">");
        out.write("\n");
        out.write("<h4 class=\"text-success\">Problem功能介绍</h4>\n");
        out.write("<h5> Problem记录整个项目在运行过程中出现的问题，包括一些错误、访问较长的行为。Problem的类型如下：</h5>\n");
        out.write("<table class=\"table table-bordered table-striped table-condensed   table-hover\">\n");
        out.write("\t<tr><td>error</td><td>Log4j记录的错误异常</td></tr>\n");
        out.write("\t<tr><td>call</td><td>表示在远程调用中transaction中出错</td></tr>\n");
        out.write("\t<tr><td>sql</td><td>表示在数据库的调用中transaction中出错</td></tr>\n");
        out.write("\t<tr><td>url</td><td>表示在url请求中调用transaction中出错</td></tr>\n");
        out.write("\t<tr><td>failure</td><td>业务程序Transaction的失败(除了call\\sql\\url之外)</td></tr>\n");
        out.write("\t<tr><td>heartbeat</td><td>心跳消息</td></tr>\n");
        out.write("\t<tr><td>long-url</td><td>执行慢的url请求（可以进行进行时间筛选）</td></tr>\n");
        out.write("\t<tr><td>long-service</td><td>执行慢的service请求（可以进行进行时间筛选）</td></tr>\n");
        out.write("\t<tr><td>long-sql</td><td>执行慢的sql请求（可以进行进行时间筛选）</td></tr>\n");
        out.write("</table>\n");
        out.write("<h4 class=\"text-success\">Problem实时报表</h4>\n");
        out.write("<h5>All的错误界面</h5>\n");
        out.write("<img  class=\"img-polaroid\"  src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/problem01.jpg\"/>\n");
        out.write("<h5>错误一个小时内的实时趋势图</h5>\n");
        out.write("<img  class=\"img-polaroid\"  src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/problem03.png\" width=\"550px\"/>\n");
        out.write("<h5>点击机器IP，进入某一台机器出现的具体问题，这个包括了All中出现的所有错误统计之外，还增加了以分钟和线程为单位的错误分布图，具体如下：</h5>\n");
        out.write("<img  class=\"img-polaroid\"  src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/problem02.jpg\"/>\n");
        out.write("<h4 class=\"text-success\">Problem历史报表</h4>\n");
        out.write("<h5>1）在选择了特定的域、报表类型、时间和IP之后，点击[:: show ::] 查看某一Type下的Problem出现次数的分布图。(当前这一天、上一天、上周这一天)</h5>\n");
        out.write("<img  class=\"img-polaroid\"  src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/problem04.png\"  width=\"370px\"/>\n");
        out.write("<h5>2）进一步，可以查看该Type下，某个Status的Problem出现次数的分布图。(当前这一天、上一天、上周这一天)</h5>\n");
        out.write("<img  class=\"img-polaroid\"  src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/problem05.png\"   width=\"100%\"/>\n");
        out.write("</div>\n");
        out.write("    <div class=\"tab-pane\" id=\"userDocoument7\">");
        out.write("\n");
        out.write("<h4 class=\"text-success\">Heartbeat实时报表</h4>\n");
        out.write("<h5>Heartbeart是CAT客户端一分钟一次向服务器发送自身的状态信息。Machine是当前项目下所有的部署机器。Heartbeat包括：</h5>\n");
        out.write("<h5 class=\"text-info\">Thread信息包括</h5>\n");
        out.write("<table style=\"width:50%\" class=\"table table-bordered table-striped table-condensed   table-hover\">\n");
        out.write("\t<tr><td>Active Thread</td><td> 系统当前活动线程</td></tr>\n");
        out.write("\t<tr><td>Daemon Thread</td><td>系统后台线程</td></tr>\n");
        out.write("\t<tr><td>Total Started Thread</td><td> 系统总共开启线程</td></tr>\n");
        out.write("\t<tr><td>Started Thread</td><td>系统每分钟新启动的线程</td></tr>\n");
        out.write("\t<tr><td>Cat Started Thread </td><td>系统中CAT客户端启动线程</td></tr>\n");
        out.write("\t<tr><td>Pigeon Started Thread</td><td> 系统中Pigeon客户端启动线程数</td></tr>\n");
        out.write("</table>\n");
        out.write("<h5 class=\"text-info\">System Info信息包括</h5>\n");
        out.write("<table style=\"width:50%\" class=\"table table-bordered table-striped table-condensed   table-hover\">\n");
        out.write("\t<tr><td>NewGc Count</td><td>新生代GC次数</td></tr>\n");
        out.write("\t<tr><td>OldGc Count</td><td>旧生代GC次数</td></tr>\n");
        out.write("\t<tr><td>System Load Average</td><td>系统Load详细信息</td></tr>\n");
        out.write("</table>\n");
        out.write("<h5 class=\"text-info\">Memery Info信息包括</h5>\n");
        out.write("<table style=\"width:50%\" class=\"table table-bordered table-striped table-condensed   table-hover\">\n");
        out.write("\t<tr><td>Memory Free</td><td>系统memoryFree情况</td></tr>\n");
        out.write("\t<tr><td>Heap Usage</td><td>Java虚拟机堆的使用情况</td></tr>\n");
        out.write("\t<tr><td>None Heap Usage</td><td>Java虚拟机Perm的使用情况</td></tr>\n");
        out.write("</table>\n");
        out.write("<h5 class=\"text-info\">Disk Info信息包括</h5>\n");
        out.write("<table style=\"width:50%\" class=\"table table-bordered table-striped table-condensed   table-hover\">\n");
        out.write("\t<tr><td>/根的使用情况</td></tr>\n");
        out.write("\t<tr><td>/data盘的使用情况</td></tr>\n");
        out.write("</table>\n");
        out.write("<h5 class=\"text-info\">Cat Info信息包括</h5>\n");
        out.write("<table style=\"width:50%\" class=\"table table-bordered table-striped table-condensed   table-hover\">\n");
        out.write("\t<tr><td>Cat每分钟产生消息数</td></tr>\n");
        out.write("\t<tr><td>Cat每分钟丢掉的消息数</td></tr>\n");
        out.write("\t<tr><td>Cat每分钟产生消息大小</td></tr>\n");
        out.write("</table>\n");
        out.write("<img  class=\"img-polaroid\"  src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/heartbeat01.png\"  width=\"100%\"/>");
        out.write("</div>\n");
        out.write("    <div class=\"tab-pane\" id=\"userDocoument8\">");
        out.write("\n");
        out.write("<h4 class=\"text-success\">Cross实时报表</h4>\n");
        out.write("<h5>统计粒度支持项目、具体某一IP、具体的服务方法</h5>\n");
        out.write("<h5>统计参数包括：访问量，错误量，响应时间，QPS</h5>\n");
        out.write("<h4 class=\"text-success\">客户端调用</h4>\n");
        out.write("<img  class=\"img-polaroid\"  src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/cross01.png\" width=\"600px\"/>\n");
        out.write("<br/>\n");
        out.write("<h4 class=\"text-success\">服务端调用</h4>\n");
        out.write("<img  class=\"img-polaroid\"  src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/cross02.png\" width=\"100%\"/>\n");
        out.write("</div>\n");
        out.write("    <div class=\"tab-pane\" id=\"userDocoument9\">");
        out.write("\n");
        out.write("<h4 class=\"text-success\">Matrix实时报表</h4>\n");
        out.write("<h5>一次请求（URL、Service）中的调用链路统计，包括远程调用、sql调用、缓存调用</h5>\n");
        out.write("<h5 class='text-danger'>Ratio表示访问次数，Min是最少，Max是最大，Avg是平均</h5>\n");
        out.write("<h5 class='text-danger'>Cost表示时间消耗，Min是最少，Max是最大，Avg是平均</h5>\n");
        out.write("<img  class=\"img-polaroid\"  src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/matrix01.png\" width=\"100%\"/>\n");
        out.write("<br/>\n");
        out.write("<br/>\n");
        out.write("<h4 class=\"text-success\">调用链路排行</h4>\n");
        out.write("<h5>包括远程调用、sql调用、缓存调用最多排行</h5>\n");
        out.write("<img  class=\"img-polaroid\"  src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/matrix02.png\" width=\"100%\"/>");
        out.write("</div>\n");
        out.write("    <div class=\"tab-pane\" id=\"userDocoument10\">");
        out.write("\n");
        out.write("<h4 class=\"text-success\">Metric实时报表</h4>\n");
        out.write("<h5>公司核心业务指标监控</h5>\n");
        out.write("<h5 class='text-danger'>“当前值”表示当前实际值，“基线值”表示根据历史趋势算出来当天的基准线</h5>\n");
        out.write("<img  class=\"img-polaroid\"  src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/metric01.png\" width=\"100%\"/>\n");
        out.write("</div>\n");
        out.write("    <div class=\"tab-pane\" id=\"userDocoument11\">");
        out.write("\n");
        out.write("<h4 class=\"text-success\">Dependency实时报表</h4>\n");
        out.write("<table style=\"width:50%\" class=\"table table-striped table-bordered table-condensed   table-hover\">\n");
        out.write("\t<tr><td>时间统计粒度</td><td class='text-danger'>分钟</td></tr>\n");
        out.write("\t<tr><td>形状：圆形</td><td class='text-danger'>SOA的一个服务或者一个Web</td ></tr>\n");
        out.write("\t<tr><td>形状：矩形</td><td class='text-danger'>数据库一个实例</td></tr>\n");
        out.write("\t<tr><td>形状：菱形</td><td class='text-danger'>缓存一种集群（MemoryCached）</td></tr>\n");
        out.write("\t<tr><td>状态：红色</td><td class='text-danger'>Error</td></tr>\n");
        out.write("\t<tr><td>状态：黄色</td><td class='text-danger'>Warning</td></tr>\n");
        out.write("\t<tr><td>状态：绿色</td><td class='text-danger'>OK</td></tr>\n");
        out.write("\t<tr><td>浮层</td><td>点击节点可以直接查询这一分钟内这个节点的详细状态</td></tr>\n");
        out.write("</table>\n");
        out.write("<img  class=\"img-polaroid\"  src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/dependency01.png\" width=\"700\" />\n");
        out.write("<h4 class=\"text-success\">应用监控大盘</h4>\n");
        out.write("<h5>把所有核心项目用监控大盘方式展示，能全局看到项目目前问题。</h4>\n");
        out.write("<img  class=\"img-polaroid\"  src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/dependency02.png\" width=\"100%\"/>\n");
        out.write("<img  class=\"img-polaroid\"  src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/dependency03.png\" width=\"100%\"/>\n");
        out.write("</div>\n");
        out.write("    <div class=\"tab-pane\" id=\"userDocoument12\">");
        out.write("\r\n");
        out.write("<h4 class=\"text-success\">Storage实时报表</h4>\r\n");
        out.write("<h5>功能：监控一段时间内数据库、Cache访问情况：各种操作访问次数、响应时间、错误次数、长时间访问量等等。</h5>\r\n");
        out.write("<p class=\"text-danger\">长时间访问定义：操作响应时间超过1秒（数据库），操作响应时间超过50毫秒（cache）</p>\r\n");
        out.write("<h4 class=\"text-sucess\">a）统计报表</h4>\r\n");
        out.write("<h5>&nbsp;&nbsp;&nbsp;&nbsp;(1) 可以选择相应操作，查看该操作的各项访问指标。数据库默认操作：<span class=\"text-danger\">select,update,delete,insert；</span>cache默认操作：<span class=\"text-danger\">add,get,mGet,remove</span></h5>\r\n");
        out.write("<h5>&nbsp;&nbsp;&nbsp;&nbsp;(2) Domain是访问该数据库或cache的应用名，All是所有应用操作数据汇总</h5>\r\n");
        out.write("<h5>&nbsp;&nbsp;&nbsp;&nbsp;(3) Count: 操作数；Long：长时间操作数；Avg：响应时间；Error：操作错误数</h5>\r\n");
        out.write("<h5>&nbsp;&nbsp;&nbsp;&nbsp;(4) 点击查询可以在当前报表上过滤不同操作访问情况，方便分析数据</h5>\r\n");
        out.write("<img  class=\"img-polaroid\"  src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/storage/storageDatabaseReport.png\" width=\"90%\"/>\r\n");
        out.write("<h5 class=\"text-sucess\">b）统计曲线图</h5>\r\n");
        out.write("<h5>&nbsp;&nbsp;&nbsp;&nbsp;(1) 图表展示当前应用操作数据库或cache情况</h5>\r\n");
        out.write("<h5>&nbsp;&nbsp;&nbsp;&nbsp;(2) 图表展示的操作种类，与查询报表中的操作对应一致</h5>\r\n");
        out.write("<img  class=\"img-polaroid\"  src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/storage/storageDatabaseLinechart.png\" width=\"90%\"/>");
        out.write("</div>\n");
        out.write("    </div>\n");
        out.write("</div>\n");
        out.write("\n");
        out.write("\t   \t");
        int evalDoAfterBody = _jspx_th_c_005fwhen_005f4.doAfterBody();
        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
          break;
      } while (true);
    }
    if (_jspx_th_c_005fwhen_005f4.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.reuse(_jspx_th_c_005fwhen_005f4);
      throw new javax.servlet.jsp.SkipPageException();
    }
    _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.reuse(_jspx_th_c_005fwhen_005f4);
    return false;
  }

  private boolean _jspx_meth_c_005fwhen_005f5(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fchoose_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:when
    org.apache.taglibs.standard.tag.rt.core.WhenTag _jspx_th_c_005fwhen_005f5 = (org.apache.taglibs.standard.tag.rt.core.WhenTag) _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.WhenTag.class);
    _jspx_th_c_005fwhen_005f5.setPageContext(_jspx_page_context);
    _jspx_th_c_005fwhen_005f5.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fchoose_005f0);
    // /jsp/report/home/home.jsp(27,5) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005fwhen_005f5.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${payload.docName == 'userMonitor'}", java.lang.Boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false)).booleanValue());
    int _jspx_eval_c_005fwhen_005f5 = _jspx_th_c_005fwhen_005f5.doStartTag();
    if (_jspx_eval_c_005fwhen_005f5 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
      do {
        out.write("\n");
        out.write("\t   \t\t");
        out.write("\n");
        out.write("<div class=\"tabbable\"> <!-- Only required for left/right tabs -->\n");
        out.write("  <ul class=\"nav nav-tabs padding-12 tab-color-blue background-blue\" style=\"height: 50px;\">\n");
        out.write("    <li class=\"active\"><a href=\"#userDocoument1\" data-toggle=\"tab\"><strong>手机APP端监控</strong></a></li>\n");
        out.write("    <li><a href=\"#userDocoument2\" data-toggle=\"tab\"><strong>浏览器WEB端监控</strong></a></a></li>\n");
        out.write("  </ul>\n");
        out.write("  <div class=\"tab-content\">\n");
        out.write("    <div class=\"tab-pane active\" id=\"userDocoument1\">");
        out.write("\n");
        out.write("<h4 class=\"text-danger\">1、APP端到端使用说明&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"/cat/r/app?domain=cat&ip=All&reportType=&op=view\">访问链接</a></h4>\n");
        out.write("<p>监控点评APP的接口调用情况，这个是从用户手机APP采集的数据，从用户角度看点评接口的访问速度。</p>\n");
        out.write("<p>监控的分析的维度有返回码、网络类型、APP版本、平台、地区、运营商等。</p>\n");
        out.write("</br>\n");
        out.write("\n");
        out.write("<h5 class=\"text-danger\">Sample1：下图显示了shop.bin在不同平台的访问量的对比情况。</h5>\n");
        out.write("<img  class=\"img-polaroid\"  width='80%'  src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/userMonitor/userMonitor01.png\"/>\n");
        out.write("\n");
        out.write("<h5 class=\"text-danger\">Sample2：下图显示可以按照不同维度展开的OLAP功能，下图按照运营商维度展开，看不同接口的访问情况。</h5>\n");
        out.write("<img  class=\"img-polaroid\"  width='80%'  src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/userMonitor/userMonitor03.png\"/>\n");
        out.write("\n");
        out.write("</br></br>\n");
        out.write("<h4 class=\"text-danger\">2、APP端到端配置&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"/cat/s/config?op=appList\">访问链接</a> </h4>\n");
        out.write("<p>用户可以在该界面对Command命令字进行修改操作。</p>\n");
        out.write("<img  class=\"img-polaroid\"  width='80%'  src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/userMonitor/userMonitor05.png\"/>\n");
        out.write("</br></br>\n");
        out.write("<h4 class=\"text-danger\">3、APP端到端告警&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"/cat/s/config?op=appRule\">访问链接</a></h4>\n");
        out.write("<h5 class=\"text-success\">A) 配置一览表</h5>\n");
        out.write("<img  class=\"img-polaroid\"  width='80%'  src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/userMonitor/userMonitor06.png\"/>\n");
        out.write("<h5 class=\"text-success\">B) 配置告警规则</h5>\n");
        out.write("<p>（1）告警名自定义，方便区分告警项。可对<span class=\"text-danger\">请求数、访问成功率、响应时间</span>进行监控。</p>\n");
        out.write("<p>（2）多个监控规则构成了告警的主体，分别对不同时间段进行配置，以方便准确地进行告警。</p>\n");
        out.write("<p>（3）监控规则诠释着某个时间段内如何进行告警，由任意多个监控条件组成。任何一条监控条件触发都会引起监控规则触发，从而告警。</p>\n");
        out.write("<p>（4）监控条件诠释着什么条件会触发监控规则，由任意多个监控子条件组成。当所有子条件同时被触发时，才会触发该监控规则。</p>\n");
        out.write("\n");
        out.write("<img  class=\"img-polaroid\"  width='80%'  src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/userMonitor/userMonitor07.png\"/>\n");
        out.write("\n");
        out.write("\n");
        out.write("\n");
        out.write("</div>\n");
        out.write("    <div class=\"tab-pane\" id=\"userDocoument2\">");
        out.write("\n");
        out.write("<h4 class=\"text-danger\">1、Web端到端使用说明&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"/cat/r/web?domain=cat&ip=All&reportType=&op=view\">访问链接</a></h4>\n");
        out.write("<p>监控点评Web页面的ajax的接口调用情况，这个是从用户Web浏览器采集的数据，从用户角度看点评接口的访问速度。</p>\n");
        out.write("<p>分析的维度有地区、运营商等。</p>\n");
        out.write("<p>此部分需要前端框架cortext配合，进行前端打点。</p>\n");
        out.write("</br>\n");
        out.write("\n");
        out.write("<p>Sample：下图显示了shopweb-suggestShop一段时间的访问情况。</p>\n");
        out.write("<img  class=\"img-polaroid\"  width='80%'  src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/userMonitor/userMonitor02.png\"/>\n");
        out.write("\n");
        out.write("</br></br>\n");
        out.write("<h4 class=\"text-danger\">2、Web端到端配置&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"/cat/s/config?op=urlPatterns\">访问链接</a> </h4>\n");
        out.write("<img  class=\"img-polaroid\"  width='80%'  src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/userMonitor/userMonitor04.png\"/>\n");
        out.write("</br></br>\n");
        out.write("<h4 class=\"text-danger\">3、Web端到端告警&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"/cat/s/config?op=webRule\">访问链接</a> </h4>\n");
        out.write("<h5 class=\"text-success\">A) 配置一览表</h5>\n");
        out.write("<img  class=\"img-polaroid\"  width='80%'  src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/userMonitor/userMonitor08.png\"/>\n");
        out.write("<h5 class=\"text-success\">B) 配置告警规则</h5>\n");
        out.write("<p>（1）告警名自定义，方便区分告警项。可对<span class=\"text-danger\">请求数、访问成功率、响应时间</span>进行监控。</p>\n");
        out.write("<p>（2）多个监控规则构成了告警的主体，分别对不同时间段进行配置，以方便准确地进行告警。</p>\n");
        out.write("<p>（3）监控规则诠释着某个时间段内如何进行告警，由任意多个监控条件组成。任何一条监控条件触发都会引起监控规则触发，从而告警。</p>\n");
        out.write("<p>（4）监控条件诠释着什么条件会触发监控规则，由任意多个监控子条件组成。当所有子条件同时被触发时，才会触发该监控规则。</p>\n");
        out.write("\n");
        out.write("<img  class=\"img-polaroid\"  width='80%'  src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/userMonitor/userMonitor09.png\"/>\n");
        out.write("\n");
        out.write("\n");
        out.write("\n");
        out.write("</div>\n");
        out.write("    </div>\n");
        out.write("</div>\n");
        out.write("\n");
        out.write("\t   \t");
        int evalDoAfterBody = _jspx_th_c_005fwhen_005f5.doAfterBody();
        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
          break;
      } while (true);
    }
    if (_jspx_th_c_005fwhen_005f5.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.reuse(_jspx_th_c_005fwhen_005f5);
      throw new javax.servlet.jsp.SkipPageException();
    }
    _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.reuse(_jspx_th_c_005fwhen_005f5);
    return false;
  }

  private boolean _jspx_meth_c_005fwhen_005f6(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fchoose_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:when
    org.apache.taglibs.standard.tag.rt.core.WhenTag _jspx_th_c_005fwhen_005f6 = (org.apache.taglibs.standard.tag.rt.core.WhenTag) _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.WhenTag.class);
    _jspx_th_c_005fwhen_005f6.setPageContext(_jspx_page_context);
    _jspx_th_c_005fwhen_005f6.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fchoose_005f0);
    // /jsp/report/home/home.jsp(30,5) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005fwhen_005f6.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${payload.docName == 'alert'}", java.lang.Boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false)).booleanValue());
    int _jspx_eval_c_005fwhen_005f6 = _jspx_th_c_005fwhen_005f6.doStartTag();
    if (_jspx_eval_c_005fwhen_005f6 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
      do {
        out.write("\n");
        out.write("\t   \t\t");
        out.write("\n");
        out.write("<div class=\"tabbable\">\n");
        out.write("  <ul class=\"nav nav-tabs padding-12 tab-color-blue background-blue\" style=\"height: 50px;\">\n");
        out.write("    <li class=\"active\"><a href=\"#overall\" data-toggle=\"tab\"><strong>综述</strong></a></li>\n");
        out.write("    <li><a href=\"#business\" data-toggle=\"tab\"><strong>业务告警</strong></a></a></li>\n");
        out.write("    <li><a href=\"#transaction\" data-toggle=\"tab\"><strong>响应时间告警</strong></a></li>\n");
        out.write("    <li><a href=\"#exception\" data-toggle=\"tab\"><strong>异常告警</strong></a></a></li>\n");
        out.write("    <li><a href=\"#frontendException\" data-toggle=\"tab\"><strong>前端告警</strong></a></a></li>\n");
        out.write("    <li><a href=\"#network\" data-toggle=\"tab\"><strong>网络告警</strong></a></a></li>\n");
        out.write("    <li><a href=\"#system\" data-toggle=\"tab\"><strong>系统告警</strong></a></a></li>\n");
        out.write("    <li><a href=\"#heartbeat\" data-toggle=\"tab\"><strong>心跳告警</strong></a></a></li>\n");
        out.write("    <li><a href=\"#database\" data-toggle=\"tab\"><strong>数据库告警</strong></a></a></li>\n");
        out.write("    <li><a href=\"#thirdPartyException\" data-toggle=\"tab\"><strong>ping告警</strong></a></a></li>\n");
        out.write("  </ul>\n");
        out.write("  \n");
        out.write("  <div class=\"tab-content\">\n");
        out.write("    <div class=\"tab-pane active\" id=\"overall\">");
        out.write("\r\n");
        out.write("<h4 class=\"text-success\">告警模块介绍</h4>\r\n");
        out.write("<h5>告警模块按照规则对收集的信息进行监控，并在规则被触发时通知相应的联系人。</h5>\r\n");
        out.write("<h5>能否有效的使用告警模块直接影响着监控的质量。通过对监控规则、告警策略、默认联系人等元素进行合理的配置，告警模块能够更快、更准确、更灵活的发现线上故障，并更有效的通知对应联系人。</h5>\r\n");
        out.write("<h4 class=\"text-success\">本页内容</h4>\r\n");
        out.write("<ul>\r\n");
        out.write("\t<li>监控规则配置</li>\r\n");
        out.write("\t<li>告警策略</li>\r\n");
        out.write("\t<li>默认联系人配置</li>\r\n");
        out.write("</ul>\r\n");
        out.write("<p>本页面对告警模块的通用概念进行介绍。如需了解某一个具体的告警类型，请阅读完本页的通用概念后再阅读对应的标签页。</p>\r\n");
        out.write("<h4 class=\"text-success\">1. 监控规则配置</h4>\r\n");
        out.write("<h5>合理、灵活的监控规则可以帮助更快、更精确的发现业务线上故障。目前Cat的监控规则有五个要素，请按照以下五点要素制定规则：</h5>\r\n");
        out.write("<p>a).时间段。同一项业务指标在每天不同的时段可能有不同的趋势。设定该项，可让Cat在每天不同的时间段执行不同的监控规则。</p>\r\n");
        out.write("<p>b).规则组合。在一个时间段中，可能指标触发了多个监控规则中的一个规则就要发出警报，也有可能指标要同时触发了多个监控规则才需要发出警报。这种关系好比电路图中的并联和串联。规则的组合合理有助于提高监控的准确度。</p>\r\n");
        out.write("<p>c).监控规则类型。通过以下八种类型对指标进行监控：下降百分比、下降数值、上升百分比、上升数值、最大值、最小值、波动百分比最大值、波动百分比最小值。</p>\r\n");
        out.write("<p>d).持续时间。设定时间后（单位为分钟），当指标在设定的时间长度内连续触发了监控规则，才会发出警报。</p>\r\n");
        out.write("<p>e).规则与被监控指标的匹配。监控规则可以按照名称、正则表达式与监控的对象（指标）进行匹配。</p>\r\n");
        out.write("<h5>监控规则模型如下图所示：</h5>\r\n");
        out.write("<img class=\"img-polaroid\" width='60%'\r\n");
        out.write("\tsrc=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/alert/alertConfig.png\" />\r\n");
        out.write("<h5>具体解释如下：</h5>\r\n");
        out.write("<p>1).一个rule元素为规则的基本单位，由唯一的id标示</p>\r\n");
        out.write("<p>2).rule元素由两个部分组成：监控对象与监控规则</p>\r\n");
        out.write("<p>&nbsp;&nbsp;a.监控对象：由metric－item元素匹配，与图中的匹配对象相对应。匹配对象是两级的，每一级都支持正则匹配</p>\r\n");
        out.write("<p>&nbsp;&nbsp;b.监控条件配置：由config元素组成，与图中监控规则相对应。每个config代表一个时间段的规则，由starttime和endtime两个属性确定。时间的配置格式为：“hh:mm”，请注意hh为24小时制。</p>\r\n");
        out.write("<p>&nbsp;&nbsp;config元素由多个监控条件组成，条件由condition元素表示。一个config下的多个condition为并联关系，当一个condition被触发，conditon所在的整个rule就被触发。</p>\r\n");
        out.write("<p>&nbsp;&nbsp;condition元素中的minute属性表示该条件的持续时间。设定时间单位为分钟。当指标在设定的时间长度内连续触发了该条规则，才会触发该condition。</p>\r\n");
        out.write("<p>&nbsp;&nbsp;condition由subcondition组成。subcondition与图中的子条件相对应。一个condition下的多个subcondition为串联关系，只有当一个condition下的全部subcondition被触发，该condition才被触发。</p>\r\n");
        out.write("<p>&nbsp;&nbsp;subcondition有八种类型，由type属性指定。subcondition的内容为对应的阈值，请注意阈值只能由数字组成，当阈值表达百分比时，不能在最后加上百分号。八种类型如下：</p>\r\n");
        out.write("<table style=\"width: 50%\"\r\n");
        out.write("\tclass=\"table table-bordered table-striped table-condensed  \">\r\n");
        out.write("\t<tr>\r\n");
        out.write("\t\t<th width=\"30%\">类型</th>\r\n");
        out.write("\t\t<th>说明</th>\r\n");
        out.write("\t</tr>\r\n");
        out.write("\t<tr>\r\n");
        out.write("\t\t<td>DescPer</td>\r\n");
        out.write("\t\t<td>下降百分比</td>\r\n");
        out.write("\t</tr>\r\n");
        out.write("\t<tr>\r\n");
        out.write("\t\t<td>DescVal</td>\r\n");
        out.write("\t\t<td>下降数值</td>\r\n");
        out.write("\t</tr>\r\n");
        out.write("\t<tr>\r\n");
        out.write("\t\t<td>AscPer</td>\r\n");
        out.write("\t\t<td>上升百分比</td>\r\n");
        out.write("\t</tr>\r\n");
        out.write("\t<tr>\r\n");
        out.write("\t\t<td>AscVal</td>\r\n");
        out.write("\t\t<td>上升数值</td>\r\n");
        out.write("\t</tr>\r\n");
        out.write("\t<tr>\r\n");
        out.write("\t\t<td>MaxVal</td>\r\n");
        out.write("\t\t<td>最大值</td>\r\n");
        out.write("\t</tr>\r\n");
        out.write("\t<tr>\r\n");
        out.write("\t\t<td>MinVal</td>\r\n");
        out.write("\t\t<td>最小值</td>\r\n");
        out.write("\t</tr>\r\n");
        out.write("\t<tr>\r\n");
        out.write("\t\t<td>FluAscPer</td>\r\n");
        out.write("\t\t<td>波动百分比最大值。即当前分钟值比监控周期内其它分钟值的增加百分比都大于设定的百分比时触发警报</td>\r\n");
        out.write("\t</tr>\r\n");
        out.write("\t<tr>\r\n");
        out.write("\t\t<td>FluDescPer</td>\r\n");
        out.write("\t\t<td>波动百分比最小值。即当前分钟值比监控周期内其它分钟值的减少百分比都大于设定的百分比时触发警报</td>\r\n");
        out.write("\t</tr>\r\n");
        out.write("\t<tr>\r\n");
        out.write("\t\t<td>SumMaxVal</td>\r\n");
        out.write("\t\t<td>总和最大值，请与告警分钟总和考虑</td>\r\n");
        out.write("\t</tr>\r\n");
        out.write("\t<tr>\r\n");
        out.write("\t\t<td>SumMinVal</td>\r\n");
        out.write("\t\t<td>总和最小值，请与告警分钟总和考虑</td>\r\n");
        out.write("\t</tr>\r\n");
        out.write("</table>\r\n");
        out.write("<p>&nbsp;&nbsp;点击\"如何使用?\"按钮，将会出现信息介绍设置规则的流程</p>\r\n");
        out.write("<h4 class=\"text-success\">2. 告警策略</h4>\r\n");
        out.write("<h5>为了将告警信息更有效的发送给对应联系人，请考虑以下五个要素制定告警策略：</h5>\r\n");
        out.write("<p>a).告警类型。Cat将告警分为六种类型：业务告警(项目指标的监控)、网络告警(网络设备监控)、系统告警(服务器状态监控)、异常告警(Exception数量监控)、第三方监控(对给定的网址，根据HTTP请求的返回码监控)、前端监控。由于告警策略是按照类型划分的，制定告警策略前首先请确定目前采用的是哪种类型的监控。</p>\r\n");
        out.write("<p>b).告警级别。告警级别即为该告警的优先级。不同级别的告警在通知渠道、暂停告警时间上可以有所差别。对告警进行合理的分级能够帮助我们将更多的精力放在更重要的问题上。</p>\r\n");
        out.write("<p>c).告警渠道。目前有三种告警渠道：邮件、微信、短信。</p>\r\n");
        out.write("<p>d).暂停告警时间。设定暂停告警时间(suspendMinute)后，某一指标在一次告警之后的指定时间段内不会再次发送告警信息。</p>\r\n");
        out.write("<p>e).恢复通知。设定恢复通知时间(recoverMinute)后，当一个指标在某一分钟告警并且在以后的指定时间段内没有再次告警时，Cat会发出恢复通知，表明该指标在这个时间段的状态是正常的。默认的恢复通知时间段为一分钟。</p>\r\n");
        out.write("<h5>告警策略模型如下图所示：</h5>\r\n");
        out.write("<img class=\"img-polaroid\" width='60%'\r\n");
        out.write("\tsrc=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/alert/alertPolicy.png\" />\r\n");
        out.write("<h5>具体解释如下：</h5>\r\n");
        out.write("<p>1).alert-policy元素对应着Cat上的全部告警策略信息。每个type元素对应着一种告警类型，由id可以得知type与告警类型的对应关系</p>\r\n");
        out.write("<p>2).type元素下每一个group元素对应着一个项目或是一个产品线的告警策略。对于异常监控以及第三方监控，此处的group请填写项目名；其它类型请填写产品线名</p>\r\n");
        out.write("<p>&nbsp;&nbsp;&nbsp;&nbsp;当group元素的id为default时，该group元素即为该告警类型的默认告警策略。当没有其它group命中时，会采用默认告警策略。</p>\r\n");
        out.write("<p>2).group元素下的level元素对应着告警级别。level元素与监控规则中的alertType属性是对应的，请两者配合使用。level元素有两个属性</p>\r\n");
        out.write("<p>&nbsp;&nbsp;&nbsp;&nbsp;send属性。该属性对应着发送渠道，发送渠道之间用逗号分割</p>\r\n");
        out.write("<p>&nbsp;&nbsp;&nbsp;&nbsp;suspendMinute属性。该属性为暂停告警时间，单位为分钟</p>\r\n");
        out.write("<h5>配置方法</h5>\r\n");
        out.write("<p>1).点击导航栏Config－－监控告警配置－－告警类型设置</p>\r\n");
        out.write("<p>2).编辑文本框的内容，点击提交</p>\r\n");
        out.write("<p>3).当出现\"操作成功\"提示时表明策略已经生效</p>\r\n");
        out.write("<h4 class=\"text-success\">3. 默认联系人设置</h4>\r\n");
        out.write("<h5>此处仅建议Cat开发者使用。主要有以下两个功能：</h5>\r\n");
        out.write("<p>a).控制某一个类型的所有告警信息是否发送</p>\r\n");
        out.write("<p>b).添加默认通知人。该通知人会收到某类型的所有告警</p>\r\n");
        out.write("<h5>默认发送人模型如下图所示：</h5>\r\n");
        out.write("<img class=\"img-polaroid\" width='60%'\r\n");
        out.write("\tsrc=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/alert/defaultReceiver.png\" />\r\n");
        out.write("<h5>配置方法</h5>\r\n");
        out.write("<p>1).点击导航栏Config－－监控告警配置－－默认告警配置</p>\r\n");
        out.write("<p>2).编辑文本框的内容，点击提交</p>\r\n");
        out.write("<p>3).当出现\"操作成功\"提示时表明规则已经生效</p>");
        out.write("</div>\n");
        out.write("    <div class=\"tab-pane\" id=\"business\">");
        out.write("\n");
        out.write("<h3 class=\"text-danger\">1. 业务监控接入</h3>\n");
        out.write("<h4 class=\"text-info\">强调两个名词，业务监控以及业务分析</h4>\n");
        out.write("<h5>a).业务分析，产品线有很多指标，来确定产品是否能满足用户需求，这部分DW在负责。</h5>\n");
        out.write("<h5>b).业务监控，它关注于最重要的业务指标，业务监控目的是快速发现业务是否存在问题，一旦出现问题，这类问题对于业务的影响有多大。</h5>\n");
        out.write("<h5>c).业务监控和业务分析有部分的交叉，业务监控数据可能是不准确的，比如销售额，他仅仅用于监控，用于发现业务是否正常。建议产品线的核心指标不超过6个。</h5>\n");
        out.write("\n");
        out.write("</br>\n");
        out.write("<h5 class=\"text-danger\">问题一：我应该怎么定义我的业务指标，什么是合适的业务指标？</h5>\n");
        out.write("<p>1、业务监控，它关注于最重要的业务指标，目的在于<span class=\"text-danger\">出现线上故障，快速发现哪些业务造成影响，以及影响面有多大</span>，它关注实时性以及告警的准确性。</p>\n");
        out.write("<p>2、业务监控目的监控线上业务健康状况，一般一个产品线的核心业务指标不超过6个，如果指标过多，会造成监控团队压力大，也会陷入指标误区。</p>\n");
        out.write("<p>比如团购，关键指标是：<span class=\"text-danger\">订单创建数量，交易数量，验券数量。</span></p>\n");
        out.write("<p>比如CAT，关键指标是：<span class=\"text-danger\">服务器处理消息数，消息丢失数目。</span></p>\n");
        out.write("<p>3、一些定义错误的业务指标，比如XXX接口失败，这其实是一个异常指标，当他大量出现时候，其实XXX正常指标肯定是下降。比如XXX响应时间，这是一个性能指标，不是业务指标，当访问量出问题（比如CDN挂了），响应时间还是正常。</p>\n");
        out.write("<p>4、正确的业务指标：XXX访问量，访问量作为指标相对基线固定，告警也比较明确。</p>\n");
        out.write("</br>\n");
        out.write("<h5 class=\"text-danger\">问题二：当我一个业务指标出了问题，比如交易数量，我怎么知道哪里出了问题？</h5>\n");
        out.write("<p>答：有些业务指标需要做第二层拆解，才能发现具体的问题点，比如交易渠道有三种，支付宝、银联、微信。业务需要对于不同渠道进行监控埋点。\n");
        out.write("</p>\n");
        out.write("<p> 但不一定所有的问题都能从业务上找到，有的可能是应用问题，比如应用的异常，有的可能是系统的问题，比如磁盘满了。</p>\n");
        out.write("\n");
        out.write("</br>\n");
        out.write("<h4 class=\"text-success\">第一步:确定业务指标</h4>\n");
        out.write("<h5>1).每个指标都有一个String作为它的唯一KEY，这个KEY在整个产品线中，不能重复。产品线的配置参考第三步。</h5>\n");
        out.write("<p>比如团购业务中，有两个核心指标，一个订单数量，一个是支付数量</p>\n");
        out.write("<p>对这两个指标定义两个唯一的String，OrderCount 和 PayCount</p>\n");
        out.write("<h5 class=\"text-danger\">KEY仅仅包括字母、数字，不能包含特殊字符，比如引号，冒号等。建议用PayCount这类命名方式。</h5>\n");
        out.write("</br>\n");
        out.write("\n");
        out.write("<h4 class=\"text-success\">第二步:业务代码埋点</h4>\n");
        out.write("<h5 class='text-danger'> Metric一共有三个API，分别用来记录次数、平均、总和，统一粒度为一分钟</h5>\n");
        out.write("<h5>1.Java API调用方式</h5>\n");
        out.write("<p> 1).logMetricForCount用于记录一个指标值出现的次数</p>\n");
        out.write("<p> 2).logMetricForDuration用于记录一个指标出现的平均值</p>\n");
        out.write("<p> 3).logMetricForSum用于记录一个指标出现的总和</p>\n");
        out.write("\n");
        out.write("<p class='text-danger'>如果代码对于调用的API过于频繁，比如一天几千万或者上亿次，为了减少服务端压力，请考虑每10次，100次打一次点（取决你的项目的统计精度）。</p>\n");
        out.write("<p class='text-danger'>具体方法就是在内存中计数， if(count%10==0) { logMetricForCount(\"key\",10) }</p>\n");
        out.write("\n");
        out.write("<p class='text-danger'> 4).OrderCount，PayCount记录次数选用logMetricForCount这个API</p>\n");
        out.write("<p> 5).集成代码可能是如下所示，下面描述了综合使用transction，event，metric这几个API，但这些指标都是独立的，可以单独使用，主要看业务场景。\n");
        out.write("\t如果仅仅是记录一个业务指标，只需要单独使用一个metric即可。\n");
        out.write("</p>\n");
        out.write("<img  class=\"img-polaroid\"  width='60%' src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/alert/business04.png\"/>\n");
        out.write("<h5>2.HTTP API调用方式</h5>\n");
        out.write("<p>接口调用请求说明</p>\n");
        out.write("<pre>\n");
        out.write("\thttp请求方式: GET（请使用http协议）\n");
        out.write("\thttp://cat.dianpingoa.com/cat/r/monitor?\n");
        out.write("</pre>\n");
        out.write("<p>参数说明</p>\n");
        out.write("<table style=\"width:90%\" class=\"table table-bordered table-striped table-condensed  \">\n");
        out.write("\t<tr><th width=\"30%\">参数</th><th>说明</th></tr>\n");
        out.write("\t<tr><td>group</td><td>监控组唯一ID名称，<span class=\"text-danger\">必需，仅仅包括字母、数字，不能包含特殊字符，比如引号，冒号等。建议TuanGou这类命名方式</span></td></tr>\n");
        out.write("\t<tr><td>domain</td><td>应用唯一ID名称，<span class=\"text-danger\">必需，仅仅包括字母、数字，不能包含特殊字符，比如引号，冒号等。建议用TuanGouWeb这类命名方式</span></td></tr>\n");
        out.write("\t<tr><td>key</td><td>监控业务唯一ID名称，<span class=\"text-danger\">必需，仅仅包括字母、数字，不能包含特殊字符，比如引号，冒号等。建议用PayCount这类命名方式</span></td></tr>\n");
        out.write("\t<tr><td>timestamp</td><td>时间戳,<span class=\"text-danger\">必需，仅仅为数字。如果缺失，选取服务器当前时间</span></td></tr>\n");
        out.write("\t<tr><td>op</td><td>sum，avg，count[<span class=\"text-danger\">默认</span>]</td></tr>\n");
        out.write("\t<tr><td>count</td><td>op=count时所需，<span class=\"text-danger\">默认为1</span></td></tr>\n");
        out.write("\t<tr><td>sum</td><td>op=sum时所需，<span class=\"text-danger\">默认为0</span></td></tr>\n");
        out.write("\t<tr><td>avg</td><td>op=avg时所需，<span class=\"text-danger\">默认为0</span></td></tr>\n");
        out.write("</table>\n");
        out.write("\n");
        out.write("<p> 1).op = count时，用于记录一个指标值出现的次数</p>\n");
        out.write("<pre>\n");
        out.write("\thttp://cat.dianpingoa.com/cat/r/monitor?timestamp=1404815988&group=myGroup&domain=myApp&key=myKey&op=count\n");
        out.write("</pre>\n");
        out.write("<p> 2).op = avg时，用于记录一个指标出现的平均值</p>\n");
        out.write("<pre>\n");
        out.write("\thttp://cat.dianpingoa.com/cat/r/monitor?timestamp=1404815988&group=myGroup&domain=myApp&key=myKey&op=avg&avg=500\n");
        out.write("</pre>\n");
        out.write("<p> 3).op = sum时，用于记录一个指标出现的总和</p>\n");
        out.write("<pre>\n");
        out.write("\thttp://cat.dianpingoa.com/cat/r/monitor?timestamp=1404815988&group=myGroup&domain=myApp&key=myKey&op=sum&sum=500\n");
        out.write("</pre>\n");
        out.write("<p> 4).op = batch时，用于批量提交指标</p>\n");
        out.write("<pre>\n");
        out.write("\thttp://cat.dianpingoa.com/cat/r/monitor?op=batch\n");
        out.write("\t\n");
        out.write("\tbatch=\n");
        out.write("\tgroup<span class=\"text-danger\">TAB</span>domain<span class=\"text-danger\">TAB</span>key<span class=\"text-danger\">TAB</span>type<span class=\"text-danger\">TAB</span>time<span class=\"text-danger\">TAB</span>value<span class=\"text-danger\">ENTER</span>\n");
        out.write("\tgroup<span class=\"text-danger\">TAB</span>domain<span class=\"text-danger\">TAB</span>key<span class=\"text-danger\">TAB</span>type<span class=\"text-danger\">TAB</span>time<span class=\"text-danger\">TAB</span>value<span class=\"text-danger\">ENTER</span>\n");
        out.write("</pre>\n");
        out.write("<p>返回说明</p>\n");
        out.write("<pre>\n");
        out.write("\t<span class=\"text-danger\">{\"statusCode\":\"-1\",\"errorMsg\":\"Unknown [ domain,group,key ] name!\"} ——> 失败 [必需参数缺失]</span>\n");
        out.write("\t<span class=\"text-success\">{\"statusCode\":\"0\"} ——> 成功</span>\n");
        out.write("</pre>\n");
        out.write("</br>\n");
        out.write("</br> \n");
        out.write("<h4 class=\"text-success\">第三步:产品线配置</h4>\n");
        out.write("<p>业务监控展示的是一个产品线下所有的业务指标信息，CAT提供了产品的配置信息</p>\n");
        out.write("<p><span class=text-info>1、必须把项目加入到一个产品线，这样项目下所有指标才能在这个产品线正确展示，如果项目换名，必须重新修改。</span></p>\n");
        out.write("<p><span class='text-info'>2、告警邮件与短信:<span class=\"text-danger\">目前cat不再支持配置告警邮件与短信。</span>cat会发送告警信息给该项目在cmdb中配置的联系人</span></p>\n");
        out.write("<h4 class=\"text-danger\">url : <a href=\"/cat/s/config?op=topologyProductLines\" target=\"_blank\">链接</a></h4>\n");
        out.write("</br> \n");
        out.write("<h4 class=\"text-success\">第四步:图形展示以及告警配置</h4>\n");
        out.write("<p>当程序埋点好，后端的Metric指标的数据都是自动插入到CAT数据库中，不需要用户进行新建业务指标，用户直接修改即可。</p>\n");
        out.write("<p>此时已经能展示基本的业务监控曲线，如果需要一些其他的配置，比如业务监控图形顺序，展示标题等。</p>\n");
        out.write("<h4 class=\"text-danger\">url : <a href=\"/cat/s/config?op=metricConfigList\" target=\"_blank\">链接</a></h4>\n");
        out.write("<img  class=\"img-polaroid\"  width='60%' src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/alert/business02.png\"/>\n");
        out.write("</br> \n");
        out.write("<h4 class=\"text-success\">第五步:配置公司级别业务大盘【运维配置】</h4>\n");
        out.write("<p>业务大盘讲各个产品线重要的业务指标进行汇总，统一展示在一个监控大盘中。</p>\n");
        out.write("<p>cat采用的时打tag的方式。如上图所示，在下拉框选择标签或者点击\"添加其他标签\"按钮，即可打上所需标签。在业务大盘中可以按照tag来查看。</p>\n");
        out.write("<h4 class=\"text-danger\">url : <a href=\"/cat/s/config?op=metricConfigList\" target=\"_blank\">链接</a></h4>\n");
        out.write("\n");
        out.write("<h3 class=\"text-danger\">2. 业务告警</h3>\n");
        out.write("<h5>业务告警是对项目业务指标的监控。</h5>\n");
        out.write("<h5>如需了解如何增加指标、在代码中埋点、配置告警通知人等信息，请点击 侧边栏－－业务监控。</h5>\n");
        out.write("<br/>\n");
        out.write("<h4 class=\"text-success\">监控规则配置</h4>\n");
        out.write("<p>1).业务告警的监控规则是以项目为单位的。</p>\n");
        out.write("<p>2).点击config－－业务监控配置－－业务监控规则，进入业务配置页面。</p>\n");
        out.write("<p>3).在业务配置页面中先选择项目所属的产品线，然后在项目列表中找到项目，并点击最右侧的按钮“规则设置”。</p>\n");
        out.write("<p>4).按照overall页面中的介绍对规则进行配置并提交，如果提示操作成功，则表示规则已经生效。</p>\n");
        out.write("<br/>\n");
        out.write("<h4 class=\"text-success\">告警策略配置</h4>\n");
        out.write("<p>1).点击导航栏Config－－监控告警配置－－告警类型设置</p>\n");
        out.write("<p>2).编辑id为business的type元素</p>\n");
        out.write("<p>&nbsp;&nbsp;&nbsp;&nbsp;如需更改默认策略，请编辑id为default的group元素</p>\n");
        out.write("<p>&nbsp;&nbsp;&nbsp;&nbsp;如需增加新的产品线策略，请添加新的group元素，id为产品线名称</p>\n");
        out.write("<p>&nbsp;&nbsp;&nbsp;&nbsp;对group下的level元素进行编辑</p>\n");
        out.write("<p>3).当出现\"操作成功\"提示时表明策略已经生效</p>");
        out.write("</div>\n");
        out.write("    <div class=\"tab-pane\" id=\"transaction\">");
        out.write("\n");
        out.write("<h4 class=\"text-info\">对所有应用的Transaction进行监控，通过对响应时间的判断选择进行警告的发送。</h4>\n");
        out.write("<br/>\n");
        out.write("<h4 class=\"text-success\">1.响应时间告警</h4>\n");
        out.write("<p>a） 监控对象：一个transaction或者某个类型下所有transaction在一分钟内的平均响应时间</p>\n");
        out.write("<p>b） 告警规则：根据已设定的一分钟内平均响应时间的阈值，对监控对象进行选择性告警</p>\n");
        out.write("<p>c） 告警周期：一分钟</p>\n");
        out.write("<br/>\n");
        out.write("<h4 class=\"text-success\">2. 响应时间阈值<a href=\"/cat/s/config?op=transactionRule\">配置</a></h4>\n");
        out.write("<table style=\"width:90%\" class=\"table table-bordered table-striped table-condensed  \">\n");
        out.write("\t<tr><th width=\"20%\">参数</th><th>说明</th></tr>\n");
        out.write("\t<tr>\n");
        out.write("\t\t<td>域名</td>\n");
        out.write("\t\t<td>项目组名称，<span class=\"text-danger\">必需</span></td>\n");
        out.write("\t<tr>\n");
        out.write("\t\t<td>Type</td>\n");
        out.write("\t\t<td>Transaction类型，<span class=\"text-danger\">必需，</span>某一类transaction的组别</td>\n");
        out.write("\t</tr>\n");
        out.write("\t<tr>\n");
        out.write("\t\t<td>Name</td>\n");
        out.write("\t\t<td>Transaction名称，<span class=\"text-danger\">非必需，</span>默认为All。当为All时，监控目标位为当前Type下所有transaction在一分钟内的平均响应时间；当为具体一个name时，监控某该transaction在一分钟内的平均响应时间。</td>\n");
        out.write("\t</tr>\n");
        out.write("\t<tr>\n");
        out.write("\t\t<td>告警阈值</td>\n");
        out.write("\t\t<td>目前只有waring级别告警，<span class=\"text-danger\">必需，</span>当平均响应时间数超过该阈值，做warning状态设置，做相应告警。（单位：毫秒）</td>\n");
        out.write("\t</tr>\n");
        out.write("</table>\n");
        out.write("<br/>\n");
        out.write("<h4 class=\"text-success\">3. 配置示例说明</h4>\n");
        out.write("<h5>A) 配置一览表</h5>\n");
        out.write("<img  class=\"img-polaroid\"  width='80%'  src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/alert/transaction01.png\"/>\n");
        out.write("<h5>B) 配置告警规则</h5>\n");
        out.write("<p>（1）告警名自定义，方便区分告警项。可对<span class=\"text-danger\">响应时间</span>进行监控。</p>\n");
        out.write("<p>（2）多个监控规则构成了告警的主体，分别对不同时间段进行配置，以方便准确地进行告警。</p>\n");
        out.write("<p>（3）监控规则诠释着某个时间段内如何进行告警，由任意多个监控条件组成。任何一条监控条件触发都会引起监控规则触发，从而告警。</p>\n");
        out.write("<p>（4）监控条件诠释着什么条件会触发监控规则，由任意多个监控子条件组成。当所有子条件同时被触发时，才会触发该监控规则。</p>\n");
        out.write("\n");
        out.write("<img  class=\"img-polaroid\"  width='80%'  src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/alert/transaction02.png\"/>\n");
        out.write("</div>\n");
        out.write("    <div class=\"tab-pane\" id=\"network\">");
        out.write("\n");
        out.write("<h3 class=\"text-danger\">1. 网络监控总述</h3>\n");
        out.write("<br/>\n");
        out.write("<h4 class=\"text-info\">分为三大监控内容</h4>\n");
        out.write("<h5>a).核心拓扑，针对公司当前核心网络的实时监控，包括南汇、呼玛机房的路由器及交换机等设备之间的进出流量。</h5>\n");
        out.write("<h5>b).网络监控，关注于最重要的业务指标，网络监控目的是快速发现网络是否存在问题，一旦出现问题，这类问题对于网络的影响有多大。</h5>\n");
        out.write("<h5>c).网络监控汇总，将各个不同的网络指标进行汇总，以方便用户进行网络各项指标的横纵向对比。</h5>\n");
        out.write("\n");
        out.write("<br/>\n");
        out.write("<h4 class=\"text-success\">1. 核心拓扑界面</h4>\n");
        out.write("<img  class=\"img-polaroid\"  width='60%' src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/alert/network01.jpeg\"/>\n");
        out.write("<p/>\n");
        out.write("<p>CTC:电信 &nbsp; CNC:网通 &nbsp; HM:呼玛 &nbsp; NH1:南汇 &nbsp; NH2:南汇</p>\n");
        out.write("<br/>\n");
        out.write("<h4 class=\"text-success\">2. 网络监控界面</h4>\n");
        out.write("<br/>\n");
        out.write("<h5>针对每个端口的进出流量进行汇总分析对比</h5>\n");
        out.write("<img  class=\"img-polaroid\"  width='60%' src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/alert/network02.jpeg\"/>\n");
        out.write("<p/>\n");
        out.write("<h5>(1) 关于网络监控的监控指标的确定以及产品线配置请参考业务监控文档</h5>\n");
        out.write("<h5>(2) 对于网络监控中的指标选取及Key格式规定</h5>\n");
        out.write("<h4>&nbsp;&nbsp;&nbsp;&nbsp;key = <text class=\"text-danger\">{组名}</text>-<text class=\"text-danger\">{关键字}</text></h4>\n");
        out.write("<p>&nbsp;&nbsp;&nbsp;&nbsp;a) 对于需要聚合在一个图表中作对比的所有指标，key中的组名必须完全相同，<text class=\"text-danger\">关键字必须不同</text>。</p>\n");
        out.write("<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;key=<text class=\"text-danger\">GigabitEthernet1/0/0-flow</text>-<text class=\"text-danger\">in</text> 与 key=<text class=\"text-danger\">GigabitEthernet1/0/0-flow</text>-<text class=\"text-danger\">out</text> 将聚合为入一个图表，生成in和out两条曲线，同时组名GigabitEthernet1/0/0-flow作为图表的标题。</p>\n");
        out.write("<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;key=<text class=\"text-danger\">GigabitEthernet1/0/1-flow</text>-<text class=\"text-danger\">in</text> 与 key=<text class=\"text-danger\">GigabitEthernet1/0/1-flow</text>-<text class=\"text-danger\">out</text> 将聚合为入一个图表，生成in和out两条曲线，同时组名GigabitEthernet1/0/1-flow作为图表的标题。</p>\n");
        out.write("<p>&nbsp;&nbsp;&nbsp;&nbsp;b) 关键字与组名之间用“<text class=\"text-danger\">-</text>”连接，关键字有字符限制<text class=\"text-danger\">（不能包含“-”）</text>，组名没有字符限制。</p>\n");
        out.write("<p>&nbsp;&nbsp;&nbsp;&nbsp;c) 不同的组名之间<text class=\"text-danger\">不能有被包含关系</text>，如：【<text class=\"text-danger\">GigabitEthernet1/0/0</text>-flow】和【<text class=\"text-danger\">GigabitEthernet1/0/0</text>】不能作为不同组名同时出现在同一group中。（红色部分为完全相同部分）</p>\n");
        out.write("<h5>(3) 对于网络的监控代码埋点，仅支持业务监控代码埋点中的HTTP API调用方式。</h5>\n");
        out.write("<p class=\"text-danger\">注意：url中项目组名字(group)必须以\"switch-\"或\"f5-\"作为开头</p>\n");
        out.write("<xmp class=\"well\">\n");
        out.write("如：http://cat.dp/cat/r/monitor?&timestamp=1404815988&group=f5-2400&domain=2400-com&key=GigabitEthernet1/0/1-flow-in&op=sum&sum=100\n");
        out.write("\n");
        out.write("</xmp>\n");
        out.write("<h5>(4) 对于需要在网络监控显示的指标，需对产品线做显示到<a href=\"/cat/s/config?op=topologyProductLines\">网络大盘配置</a>，如下图</h5>\n");
        out.write("<img  class=\"img-polaroid\"  width='60%' src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/alert/network03.png\"/>\n");
        out.write("<br/><br/>\n");
        out.write("\n");
        out.write("<h3 class=\"text-danger\">2. 网络告警</h3>\n");
        out.write("<h5>网络告警是对网络设备运行状态的监控。通过对流量、接口丢包错包数目、CPU使用率等参数的监控，可以了解网络设备的运行状态。</h5>\n");
        out.write("<h5>如需了解如何查看核心拓扑界面、查看实时数据等信息，请点击 侧边栏－－网络监控。</h5>\n");
        out.write("<br/>\n");
        out.write("<h4 class=\"text-success\">监控规则配置</h4>\n");
        out.write("<p>网络告警配置在通用规则模型的基础上增加了productText以及metricItemText。网络监控规则模型如下：</p>\n");
        out.write("<img class=\"img-polaroid\" width='60%'\n");
        out.write("\tsrc=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/alert/commonRule.png\" />\n");
        out.write("<p>1).点击config－－网络监控配置－－网络告警配置，进入网络规则配置页面。</p>\n");
        out.write("<p>2).按照overall页面以及上图中的介绍对规则进行配置并提交，如果提示操作成功，则表示规则已经生效。</p>\n");
        out.write("<br/>\n");
        out.write("<h4 class=\"text-success\">告警策略配置</h4>\n");
        out.write("<p>1).点击导航栏Config－－监控告警配置－－告警类型设置</p>\n");
        out.write("<p>2).编辑id为network的type元素</p>\n");
        out.write("<p>&nbsp;&nbsp;&nbsp;&nbsp;如需更改默认策略，请编辑id为default的group元素</p>\n");
        out.write("<p>&nbsp;&nbsp;&nbsp;&nbsp;如需增加新的产品线策略，请添加新的group元素，id为产品线名称</p>\n");
        out.write("<p>&nbsp;&nbsp;&nbsp;&nbsp;对group下的level元素进行编辑</p>\n");
        out.write("<p>3).当出现\"操作成功\"提示时表明策略已经生效</p>");
        out.write("</div>\n");
        out.write("    <div class=\"tab-pane\" id=\"system\">");
        out.write("\n");
        out.write("<h4 class=\"text-success\">系统告警</h4>\n");
        out.write("<h5>系统告警是对服务器运行状态的监控。通过对CPU、内存、硬盘等参数的监控，可以了解服务器的运行状态。</h5>\n");
        out.write("<h5>目前paas平台上的服务器已采用Cat进行系统监控。其它服务器暂时继续使用zabbix进行系统监控</h5>\n");
        out.write("<br/>\n");
        out.write("<h4 class=\"text-success\">监控规则配置</h4>\n");
        out.write("<p>系统告警配置在通用规则模型的基础上增加了productText以及metricItemText。系统监控规则模型如下：</p>\n");
        out.write("<img class=\"img-polaroid\" width='60%'\n");
        out.write("\tsrc=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/alert/commonRule.png\" />\n");
        out.write("<p>1).点击 配置－－监控告警配置－－系统告警配置，进入系统规则配置页面。</p>\n");
        out.write("<p>2).按照overall页面以及上图中的介绍对规则进行配置并提交，如果提示操作成功，则表示规则已经生效。</p>\n");
        out.write("<p>&nbsp;&nbsp;&nbsp;&nbsp;由于系统监控规则一般即为所有服务器的通用监控规则，一般不设置productText属性。</p>\n");
        out.write("<br/>\n");
        out.write("<h4 class=\"text-success\">告警策略配置</h4>\n");
        out.write("<p>1).点击导航栏 配置－－监控告警配置－－告警类型设置</p>\n");
        out.write("<p>2).编辑id为system的type元素</p>\n");
        out.write("<p>&nbsp;&nbsp;&nbsp;&nbsp;如需更改默认策略，请编辑id为default的group元素</p>\n");
        out.write("<p>&nbsp;&nbsp;&nbsp;&nbsp;如需增加新的产品线策略，请添加新的group元素，id为产品线名称</p>\n");
        out.write("<p>&nbsp;&nbsp;&nbsp;&nbsp;对group下的level元素进行编辑</p>\n");
        out.write("<p>3).当出现\"操作成功\"提示时表明策略已经生效</p>");
        out.write("</div>\n");
        out.write("    <div class=\"tab-pane\" id=\"exception\">");
        out.write("\n");
        out.write("<h4 class=\"text-info\">对所有应用异常进行监控，通过对异常次数的判断选择进行警告的发送，并统计出异常警告报表。</h4>\n");
        out.write("<br/>\n");
        out.write("<h4 class=\"text-success\">1. 异常阈值<a href=\"/cat/s/config?op=exception\">配置</a></h4>\n");
        out.write("<table style=\"width:90%\" class=\"table table-bordered table-striped table-condensed  \">\n");
        out.write("\t<tr><th width=\"20%\">参数</th><th>说明</th></tr>\n");
        out.write("\t<tr>\n");
        out.write("\t\t<td>域名</td>\n");
        out.write("\t\t<td>项目组名称，<span class=\"text-danger\">必需，</span>当设置为“Default”时，适用于所有项目组。</td>\n");
        out.write("\t<tr>\n");
        out.write("\t\t<td>异常名称</td>\n");
        out.write("\t\t<td>异常名称，<span class=\"text-danger\">必需，</span>当设置为“Total”时，是针对当前项目组所有异常总数阈值进行设置；当设置为特定异常名称时，针对当前项目组所有同名的异常阈值进行设定</td>\n");
        out.write("\t</tr>\n");
        out.write("\t<tr>\n");
        out.write("\t\t<td>Warning阈值</td>\n");
        out.write("\t\t<td>认定为Warning级别的阈值，<span class=\"text-danger\">必需，</span>当异常数小于该阈值时，不做任何警报；当超过该阈值，小于Error阈值时，做Warning状态设置，做相应警warning告警</td>\n");
        out.write("\t</tr>\n");
        out.write("\t<tr>\n");
        out.write("\t\t<td>Error阈值</td>\n");
        out.write("\t\t<td>认定为Error级别的阈值，<span class=\"text-danger\">必需，</span>当异常数超过该阈值，做Error状态设置，做相应警Error告警</td>\n");
        out.write("\t</tr>\n");
        out.write("</table>\n");
        out.write("<br/>\n");
        out.write("<h4 class=\"text-success\">2. 异常过滤<a href=\"/cat/s/config?op=exception\">配置</a></h4>\n");
        out.write("<p>对于不想进行异常告警的异常，可以在异常过滤配置里进行设置</p>\n");
        out.write("<table style=\"width:90%\" class=\"table table-bordered table-striped table-condensed  \">\n");
        out.write("\t<tr><th width=\"20%\">参数</th><th>说明</th></tr>\n");
        out.write("\t<tr>\n");
        out.write("\t\t<td>域名</td>\n");
        out.write("\t\t<td>项目组名称，<span class=\"text-danger\">必需，</span>当设置为“Default”时，适用于所有项目组。</td>\n");
        out.write("\t<tr>\n");
        out.write("\t\t<td>异常名称</td>\n");
        out.write("\t\t<td>异常名称，<span class=\"text-danger\">必需，</span>当设置为特定异常名称时，过滤当前项目组所有同名的异常</td>\n");
        out.write("\t</tr>\n");
        out.write("</table>\n");
        out.write("<br/>\n");
        out.write("<h4 class=\"text-success\">3. 异常告警<a href=\"/cat/s/config?op=projects\">组邮件配置</a></h4>\n");
        out.write("<p>针对每个项目组，可以进行组邮件和联系人的配置，CAT将根据此配置进行邮件的发送。</p>\n");
        out.write("<p class=\"text-danger\">注意：不设置组邮件的话，您将错过第一时间知晓异常的机会！</p>\n");
        out.write("<br/>\n");
        out.write("<h4 class=\"text-success\">4. 异常告警</h4>\n");
        out.write("<h5>(1) 实时监测当前的应用异常情况，对于超过阈值设置的异常，Warning级别的仅发送邮件，Error级别的同时发送邮件和短信。</h5>\n");
        out.write("<h5>(2) 监测异常并发送警报的周期为：<span class=\"text-danger\">一分钟</span></h5>\n");
        out.write("<h5>(3) 异常判定规则</h5>\n");
        out.write("<xmp class=\"well\">\n");
        out.write("a) 监测到的所有异常总数，达到该项目组设定的异常总数阈值时，进行告警：\n");
        out.write("   总数大于Warning阈值，小于Error阈值，进行Warning级别告警；大于Error阈值，进行Error级别告警。\n");
        out.write("   只关心周期内异常出现次数总和，一个周期内最多只发送该告警一次。\n");
        out.write("     \n");
        out.write("b) 当监测到特定异常总数，达到该项目组设定的该异常阈值时，进行告警：\n");
        out.write("   总数大于Warning阈值，小于Error阈值，进行Warning级别告警；大于Error阈值，进行Error级别告警。\n");
        out.write("   如果特定异常在一个周期内出现多次超过阈值的情况，不会立即告警，而是周期结束时根据异常总和大小来判定并告警，故一个周期内最多只发送该告警一次。\n");
        out.write("</xmp>\n");
        out.write("<br/>\n");
        out.write("<h4 class=\"text-success\">5. 异常告警统计<a href=\"/cat/r/statistics?domain=Cat&op=alert\">报表</a></h4>\n");
        out.write("<p>a) 将异常告警的情况进行统计，按Error警告的次数从大到小进行排序，呈现出错警告及排行的详细情况。</p>\n");
        out.write("<p/>\n");
        out.write("<p>b) 点击“<a href=\"/cat/r/statistics?domain=Cat&op=alert\">Detail</a>”查看详细异常情况</p>");
        out.write("</div>\n");
        out.write("    <div class=\"tab-pane\" id=\"heartbeat\">");
        out.write("\n");
        out.write("<h4 class=\"text-success\">心跳告警</h4>\n");
        out.write("<h5>心跳告警是对服务器当前状态的监控，如监控系统负载、GC数量等信息。</h5>\n");
        out.write("<br/>\n");
        out.write("<h4 class=\"text-success\">监控规则配置</h4>\n");
        out.write("<p>心跳告警是由两级匹配的。首先匹配项目，然后按照指标匹配。指标由下拉框选择。</p>\n");
        out.write("<img class=\"img-polaroid\" width='60%'\n");
        out.write("\tsrc=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/alert/heartbeatRule.png\" />\n");
        out.write("<p>1).点击config－－应用监控配置－－心跳告警配置，进入心跳规则配置页面。</p>\n");
        out.write("<p>2).按照overall页面以及上图中的介绍对规则进行配置并提交，如果提示操作成功，则表示规则已经生效。</p>\n");
        out.write("<br/>\n");
        out.write("<h4 class=\"text-success\">告警策略配置</h4>\n");
        out.write("<p>1).点击导航栏 配置－－监控告警配置－－告警类型设置</p>\n");
        out.write("<p>2).编辑id为heartbeat的type元素</p>\n");
        out.write("<p>&nbsp;&nbsp;&nbsp;&nbsp;如需更改默认策略，请编辑id为default的group元素</p>\n");
        out.write("<p>&nbsp;&nbsp;&nbsp;&nbsp;如需增加新的项目策略，请添加新的group元素，id为项目名称</p>\n");
        out.write("<p>&nbsp;&nbsp;&nbsp;&nbsp;对group下的level元素进行编辑</p>\n");
        out.write("<p>3).当出现\"操作成功\"提示时表明策略已经生效</p>");
        out.write("</div>\n");
        out.write("    <div class=\"tab-pane\" id=\"database\">");
        out.write("\n");
        out.write("<h4 class=\"text-success\">数据库告警</h4>\n");
        out.write("<h5>数据库告警是对数据库运行状态的监控。</h5>\n");
        out.write("<br/>\n");
        out.write("<h4 class=\"text-success\">监控规则配置</h4>\n");
        out.write("<p>数据库告警配置在通用规则模型的基础上增加了productText以及metricItemText。数据库监控规则模型如下：</p>\n");
        out.write("<img class=\"img-polaroid\" width='60%'\n");
        out.write("\tsrc=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/alert/commonRule.png\" />\n");
        out.write("<p>1).点击 配置－－监控告警配置－－数据库告警配置，进入数据库规则配置页面。</p>\n");
        out.write("<p>2).按照overall页面以及上图中的介绍对规则进行配置并提交，如果提示操作成功，则表示规则已经生效。</p>\n");
        out.write("<br/>\n");
        out.write("<h4 class=\"text-success\">告警策略配置</h4>\n");
        out.write("<p>1).点击导航栏 配置－－监控告警配置－－告警类型设置</p>\n");
        out.write("<p>2).编辑id为database的type元素</p>\n");
        out.write("<p>&nbsp;&nbsp;&nbsp;&nbsp;如需更改默认策略，请编辑id为default的group元素</p>\n");
        out.write("<p>&nbsp;&nbsp;&nbsp;&nbsp;如需增加新的产品线策略，请添加新的group元素，id为产品线名称</p>\n");
        out.write("<p>&nbsp;&nbsp;&nbsp;&nbsp;对group下的level元素进行编辑</p>\n");
        out.write("<p>3).当出现\"操作成功\"提示时表明策略已经生效</p>");
        out.write("</div>\n");
        out.write("    <div class=\"tab-pane\" id=\"thirdPartyException\">");
        out.write("\n");
        out.write("<h4 class=\"text-success\">ping告警</h4>\n");
        out.write("<h5>ping告警是根据指定的网址发送HTTP请求，当返回码不为200时发送警告。</h5>\n");
        out.write("<h5>ping告警是一种HeartBeat检测，可以监控一个web app的可用性和网络状况</h5>\n");
        out.write("<br/>\n");
        out.write("<h4 class=\"text-success\">监控规则配置</h4>\n");
        out.write("<p>为了满足ping监控的需求，ping监控规则没有采用通用的规则模型。其规则模型如下：</p>\n");
        out.write("<img class=\"img-polaroid\" width='60%'\n");
        out.write("\tsrc=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/alert/thirdPartyAlert.png\" />\n");
        out.write("<p>具体配置如下</p>\n");
        out.write("<p><span class=\"text-danger\">[url]</span>：监控的网址</p>\n");
        out.write("<p><span class=\"text-danger\">[type]</span>：<span class=\"text-danger\">get</span> 或 <span class=\"text-danger\">post</span></p>\n");
        out.write("<p><span class=\"text-danger\">[domain]</span>：依赖于该ping的项目名，会向该项目组联系人发ping告警</p>\n");
        out.write("<p><span class=\"text-danger\">[par]</span>：请求中包含的参数，<span class=\"text-danger\">id</span>为参数名称，<span class=\"text-danger\">value</span>为参数值</p>\n");
        out.write("<p>以上参数名均为小写。监控周期为一分钟。</p>\n");
        out.write("<br/>\n");
        out.write("<h4 class=\"text-success\">规则更新</h4>\n");
        out.write("<p>1).点击config－－应用监控配置－－ping监控配置，进入ping监控规则配置页面。</p>\n");
        out.write("<p>2).按照上述介绍对规则进行配置并提交，如果提示操作成功，则表示规则已经生效。</p>\n");
        out.write("<br/>\n");
        out.write("<h4 class=\"text-success\">告警策略配置</h4>\n");
        out.write("<p>1).点击导航栏Config－－监控告警配置－－告警类型设置</p>\n");
        out.write("<p>2).编辑id为thirdParty的type元素</p>\n");
        out.write("<p>&nbsp;&nbsp;&nbsp;&nbsp;如需更改默认策略，请编辑id为default的group元素</p>\n");
        out.write("<p>&nbsp;&nbsp;&nbsp;&nbsp;如需增加新的产品线策略，请添加新的group元素，id为项目名称，与规则配置中的domain属性相对应</p>\n");
        out.write("<p>&nbsp;&nbsp;&nbsp;&nbsp;对group下的level元素进行编辑</p>\n");
        out.write("<p>3).当出现\"操作成功\"提示时表明策略已经生效</p>");
        out.write("</div>\n");
        out.write("    <div class=\"tab-pane\" id=\"frontendException\">");
        out.write("\n");
        out.write("<h4 class=\"text-success\">前端JS告警</h4>\n");
        out.write("<h5>前端JS告警监控JavaScript运行状况。</h5>\n");
        out.write("<h5>当某一个页面上js运行抛出的Error总数超过设定的阈值时，发出告警信息。</h5>\n");
        out.write("<br/>\n");
        out.write("<h4 class=\"text-success\">监控规则配置</h4>\n");
        out.write("<p>为了满足监控的需求，前端JS监控规则没有采用通用的规则模型。其配置如下：</p>\n");
        out.write("<img class=\"img-polaroid\" width='60%'\n");
        out.write("\tsrc=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/alert/frontendException.png\" />\n");
        out.write("<p>各个参数含义如下</p>\n");
        out.write("<p><span class=\"text-danger\">[报表类型、域名]</span>：请勿更改</p>\n");
        out.write("<p><span class=\"text-danger\">[模版]</span>：被监控的网址</p>\n");
        out.write("<p><span class=\"text-danger\">[告警阈值]</span>：在一分钟内js抛出error个数的上限值。超过这个值就会发出告警</p>\n");
        out.write("<p><span class=\"text-danger\">[联系人邮件]</span>：告警联系人。多个联系人请用，分开</p>\n");
        out.write("<br/>\n");
        out.write("<h4 class=\"text-success\">规则更新</h4>\n");
        out.write("<p>1).点击config－－外部监控配置－－JS合并规则，进入前端JS监控规则配置页面。</p>\n");
        out.write("<p>2).点击新增按钮或者选取已有网址的编辑按钮，按照上述介绍对规则进行配置并提交，如果列表页面已更新，则表示规则已经生效。</p>\n");
        out.write("<br/>\n");
        out.write("<h4 class=\"text-success\">告警策略配置</h4>\n");
        out.write("<p>1).点击导航栏Config－－监控告警配置－－告警类型设置</p>\n");
        out.write("<p>2).编辑id为fontEnd的type元素</p>\n");
        out.write("<p>&nbsp;&nbsp;&nbsp;&nbsp;只有一个group元素，其id为frontEnd。请不要再添加其它group元素</p>\n");
        out.write("<p>&nbsp;&nbsp;&nbsp;&nbsp;对group下的level元素进行编辑</p>\n");
        out.write("<p>&nbsp;&nbsp;&nbsp;&nbsp;send属性只可为mail，请勿添加其它渠道</p>\n");
        out.write("<p>3).当出现\"操作成功\"提示时表明策略已经生效</p>");
        out.write("</div>\n");
        out.write("   </div>\n");
        out.write("</div>\n");
        out.write("\n");
        out.write("\t   \t");
        int evalDoAfterBody = _jspx_th_c_005fwhen_005f6.doAfterBody();
        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
          break;
      } while (true);
    }
    if (_jspx_th_c_005fwhen_005f6.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.reuse(_jspx_th_c_005fwhen_005f6);
      throw new javax.servlet.jsp.SkipPageException();
    }
    _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.reuse(_jspx_th_c_005fwhen_005f6);
    return false;
  }

  private boolean _jspx_meth_c_005fwhen_005f7(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fchoose_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:when
    org.apache.taglibs.standard.tag.rt.core.WhenTag _jspx_th_c_005fwhen_005f7 = (org.apache.taglibs.standard.tag.rt.core.WhenTag) _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.WhenTag.class);
    _jspx_th_c_005fwhen_005f7.setPageContext(_jspx_page_context);
    _jspx_th_c_005fwhen_005f7.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fchoose_005f0);
    // /jsp/report/home/home.jsp(33,5) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005fwhen_005f7.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${payload.docName == 'interface'}", java.lang.Boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false)).booleanValue());
    int _jspx_eval_c_005fwhen_005f7 = _jspx_th_c_005fwhen_005f7.doStartTag();
    if (_jspx_eval_c_005fwhen_005f7 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
      do {
        out.write("\n");
        out.write("\t   \t\t");
        out.write("\n");
        out.write("<div class=\"tabbable\"> <!-- Only required for left/right tabs -->\n");
        out.write("  <ul class=\"nav nav-tabs padding-12 tab-color-blue background-blue\" style=\"height: 50px;\">\n");
        out.write("    <li class=\"active\"><a href=\"#interfaceDocoument1\" data-toggle=\"tab\"><strong>用户侧监控</strong></a></li>\n");
        out.write("    <li><a href=\"#interfaceDocoument7\" data-toggle=\"tab\"><strong>心跳扩展接口</strong></a></li>\n");
        out.write("    <li><a href=\"#interfaceDocoument2\" data-toggle=\"tab\"><strong>线上变更</strong></a></li>\n");
        out.write("    <li><a href=\"#interfaceDocoument3\" data-toggle=\"tab\"><strong>邮件短信微信</strong></a></li>\n");
        out.write("    <li><a href=\"#interfaceDocoument4\" data-toggle=\"tab\"><strong>Metric-HTTP</strong></a></li>\n");
        out.write("    <li><a href=\"#interfaceDocoument5\" data-toggle=\"tab\"><strong>APP-Config</strong></a></li>\n");
        out.write("    <li><a href=\"#interfaceDocoument6\" data-toggle=\"tab\"><strong>Zabbix告警</strong></a></li>\n");
        out.write("    <li><a href=\"#interfaceDocoument0\" data-toggle=\"tab\"><strong>报表接口</strong></a></li>\n");
        out.write("  </ul>\n");
        out.write("  <div class=\"tab-content\">\n");
        out.write("    <div class=\"tab-pane\"  id=\"interfaceDocoument0\">");
        out.write("\n");
        out.write("<h4 class='text-danger'>在CAT的URL后面加上参数forceDownload=xml，可以看到当前页面的数据模型</h4>\n");
        out.write("<h4> Sample：<a href=\"http://cat.dianpingoa.com/cat/r/t?domain=&ip=&date=2014112110&reportType=&op=view&forceDownload=xml\">传送门</a></h4>\n");
        out.write("<h4>PS：大部分核心界面都有接口。</h4>");
        out.write("</div>\n");
        out.write("    <div class=\"tab-pane active\"  id=\"interfaceDocoument1\">");
        out.write("\n");
        out.write("<h4 class=\"text-danger\">用户端监控文档</h4>\n");
        out.write("<h5 class=\"text-info\"> a).从用户端角度来看点评的业务接口状态，这是一个端到端的监控，能最早的发现用户端出现问题，比如根本访问不到点评，某城市延迟很大等。</h5>\n");
        out.write("<h5 class=\"text-info\"> b).用户端的监控目前能监控Ajax接口，页面Page不能监控到。</h5>\n");
        out.write("<h5 class=\"text-info\"> c).一般一个应用会监控1-2个重要接口，后端实时分析会按照城市、运营商维度做一些聚合分析。</h5>\n");
        out.write("\n");
        out.write("</br>\n");
        out.write("<h4>外部监控API文档</h4> \n");
        out.write("<p>用途：提供外部监控的Http接口，用于监控用户端的错误信息。</p>\n");
        out.write("<p>1、为了保留以后的扩展性，移动端和Web端的暂定用不同的API接口。</p>\n");
        out.write("<p>2、公网IP，已经提交申请，后续我补充下。</p>\n");
        out.write("<p class=\"text-danger\">3、【电信，暂使用此IP】CTC:  114.80.165.63，文档后面{ip}使用这个。</p>\n");
        out.write("<p>4、【网通，暂时不使用】CNC:  140.207.217.23</p>\n");
        out.write("\n");
        out.write("</br>\n");
        out.write("<h4 class=\"text-danger\">Web单次接口</h4>\n");
        out.write("\t<pre>\thttp://{ip}/broker-service/api/single</pre>\n");
        out.write("\t\n");
        out.write("\t<p>参数说明</p>\n");
        out.write("\t<table style=\"width:70%\" class=\"table table-bordered table-striped table-condensed  \">\n");
        out.write("\t\t<tr><th>query名</th><th>实际名称</th><th>描述</th><th>类型</th></tr>\t\n");
        out.write("\t\t<tr><td>v</td><td>version</td><td>API版本号</td><td>暂定为1</td></tr>\n");
        out.write("\t\t<tr><td>ts</td><td>timestamp</td><td>发生时间</td><td>long型，1970到现在的毫秒数</td></tr>\n");
        out.write("\t\t<tr><td>tu</td><td>targetUrl</td><td>调用的URL或API</td><td>String</td></tr>\n");
        out.write("\t\t<tr><td>d</td><td>duration</td><td>访问耗时</td><td>long 毫秒</td></tr>\n");
        out.write("\t\t<tr><td>hs</td><td>httpStatus</td><td>httpStatus</td><td>整型</td></tr>\n");
        out.write("\t\t<tr><td>ec</td><td>errorCode</td><td>ErrorCode</td><td>整型，如果没有的话，传空</td></tr>\n");
        out.write("\t</table>\n");
        out.write("\n");
        out.write("自定义 HttpStatus 表\n");
        out.write("\t<table style=\"width:70%\" class=\"table table-bordered table-striped table-condensed  \">\n");
        out.write("\t\t<tr><th>code名称</th><th>code含义</th></tr>\t\n");
        out.write("\t\t<tr><td>-100</td><td>如果当前没有连接，不能连接到网络</td></tr>\n");
        out.write("\t\t<tr><td>-107</td><td>回传的数据格式出错</td></tr>\n");
        out.write("\t\t<tr><td>-901</td><td>当数据发送之后，500ms 之内没有收到 header</td></tr>\n");
        out.write("\t\t<tr><td>-902</td><td>当收到header 和 httpstatus 之后，500ms 之内没有开始下载</td></tr>\n");
        out.write("\t\t<tr><td>-903</td><td>当开始 loading 之后，500ms 之后仍然没有传送完毕</td></tr>\n");
        out.write("\t\t<tr><td>-904</td><td>实际上不会出现这个 code，因为 readyState 置 4 之后就成功了</td></tr>\n");
        out.write("\t\t<tr><td>-905</td><td>响应体的类型不符，比如 JSON.parse 失败</td></tr>\n");
        out.write("\t\t<tr><td>-910</td><td>业务超时，当业务代码中设置了 timeout 以后，触发了超时</td></tr>\n");
        out.write("\t\t<tr><td>-911</td><td>当业务代码中触发了 cancel 方法后，触发的 ajax 取消，有可能由业务逻辑所致，而不是错误。</td></tr>\n");
        out.write("\t\t<tr><td>>0</td><td>业务 code</td></tr>\n");
        out.write("\t</table>\n");
        out.write("</br>\n");
        out.write("\n");
        out.write("<p>ec 参数</p>\n");
        out.write("<p>今后 ec 参数仅仅是用来标识 response json 中的 code 值</p>\n");
        out.write("\n");
        out.write("</br>\n");
        out.write("\n");
        out.write("<h4 class=\"text-danger\">APP用户访问批量接口</h4>\n");
        out.write("\t<pre>\thttp://{ip}/broker-service/api/batch</pre>\n");
        out.write("\t<p>批量接口POST内容，前面加上“<span class=\"text-danger\">v=2&c=</span>”(v=1已遗弃)，不同请求之间用回车<span class=\"text-danger\">ENTER</span>分隔，字段之间用<span class=\"text-danger\">TAB</span>分隔。</p>\n");
        out.write("\t\n");
        out.write("\t<table class=\"table table-bordered table-striped table-condensed  \">\n");
        out.write("\t\t<tr><th>实际名称</th><th>描述</th><th>类型</th></tr>\n");
        out.write("\t\t<tr><td>timestamp</td><td>发送数据时的时间戳</td><td>long</td></tr>\n");
        out.write("\t\t<tr><td>network</td><td>2G,3G,4G,WIFI(iOS只有3G和WIFI)，1=wifi, 2=2G, 3=3G, 4=4G, 0=Unknown</td><td>int</td></tr>\n");
        out.write("\t\t<tr><td>version</td><td>versionCode,比如6.8=680,只支持int类型</td><td>int</td></tr>\n");
        out.write("\t\t<tr><td>tunnel</td><td>0 or 1，默认是0表示短连接，1表示是长连</td><td>int</td></tr>\n");
        out.write("\t\t<tr><td>command</td><td>接口，一般为url path的最后一个单位(shop.bin)</td><td>String</td></tr>\n");
        out.write("\t\t<tr><td>code</td><td>status code,建议区分http的返回码,比如>1000为业务错误码,<1000为网络错误码,<0为自定义错误码</td><td>int</td></tr>\n");
        out.write("\t\t<tr><td>platform</td><td>android=1,ios=2,Unknown=0</td><td>int</td></tr>\n");
        out.write("\t\t<tr><td>requestbyte</td><td>发送字节数</td><td>int</td></tr>\n");
        out.write("\t\t<tr><td>responsebyte</td><td>返回字节数</td><td>int</td></tr>\n");
        out.write("\t\t<tr><td>responsetime</td><td>用时 (毫秒）</td><td>int</td></tr>\n");
        out.write("\t</table>\n");
        out.write("\t\n");
        out.write("\t<pre>\n");
        out.write("\t单个请求格式如下\n");
        out.write("\ttimstamp<span class=\"text-danger\">TAB</span>network<span class=\"text-danger\">TAB</span>version<span class=\"text-danger\">TAB</span>tunnel<span class=\"text-danger\">TAB</span>command<span class=\"text-danger\">TAB</span>code<span class=\"text-danger\">TAB</span>platform<span class=\"text-danger\">TAB</span>requestbyte<span class=\"text-danger\">TAB</span>responsebyte<span class=\"text-danger\">TAB</span>responsetime<span class=\"text-danger\">ENTER</span>\n");
        out.write("\t\n");
        out.write("\t</pre>\n");
        out.write("\t<p>POST内容如果有如下5个请求，Sample的POST内容为，</p>\n");
        out.write("\t<p class=\"text-danger\">v=2&c=不需要做urlencode，后面的批量的content部分需要urlencode。</p>\n");
        out.write("\t<pre>\n");
        out.write("\tv=2&c=\n");
        out.write("\t1400037748152<span class=\"text-danger\">\\t</span>1<span class=\"text-danger\">\\t</span>680<span class=\"text-danger\">\\t</span>1<span class=\"text-danger\">\\t</span>shop.bin<span class=\"text-danger\">\\t</span>200<span class=\"text-danger\">\\t</span>1<span class=\"text-danger\">\\t</span>100<span class=\"text-danger\">\\t</span>100<span class=\"text-danger\">\\t</span>200<span class=\"text-danger\">\\n</span> \n");
        out.write("\t1400037748163<span class=\"text-danger\">\\t</span>1<span class=\"text-danger\">\\t</span>680<span class=\"text-danger\">\\t</span>1<span class=\"text-danger\">\\t</span>shop.bin<span class=\"text-danger\">\\t</span>200<span class=\"text-danger\">\\t</span>2<span class=\"text-danger\">\\t</span>120<span class=\"text-danger\">\\t</span>110<span class=\"text-danger\">\\t</span>300<span class=\"text-danger\">\\n</span> \n");
        out.write("\t1400037748174<span class=\"text-danger\">\\t</span>1<span class=\"text-danger\">\\t</span>680<span class=\"text-danger\">\\t</span>1<span class=\"text-danger\">\\t</span>shop.bin<span class=\"text-danger\">\\t</span>200<span class=\"text-danger\">\\t</span>3<span class=\"text-danger\">\\t</span>110<span class=\"text-danger\">\\t</span>120<span class=\"text-danger\">\\t</span>200<span class=\"text-danger\">\\n</span> \n");
        out.write("\t1400037748185<span class=\"text-danger\">\\t</span>1<span class=\"text-danger\">\\t</span>680<span class=\"text-danger\">\\t</span>1<span class=\"text-danger\">\\t</span>shop.bin<span class=\"text-danger\">\\t</span>200<span class=\"text-danger\">\\t</span>1<span class=\"text-danger\">\\t</span>120<span class=\"text-danger\">\\t</span>130<span class=\"text-danger\">\\t</span>100<span class=\"text-danger\">\\n</span> \n");
        out.write("\t1400037748196<span class=\"text-danger\">\\t</span>1<span class=\"text-danger\">\\t</span>680<span class=\"text-danger\">\\t</span>1<span class=\"text-danger\">\\t</span>shop.bin<span class=\"text-danger\">\\t</span>500<span class=\"text-danger\">\\t</span>2<span class=\"text-danger\">\\t</span>110<span class=\"text-danger\">\\t</span>140<span class=\"text-danger\">\\t</span>200<span class=\"text-danger\">\\n</span>\n");
        out.write("\t</pre>\t\n");
        out.write("</br>\n");
        out.write("\n");
        out.write("<h4 class=\"text-danger\">APP加载速度批量接口</h4>\n");
        out.write("\t<pre>\thttp://{ip}/broker-service/api/speed</pre>\n");
        out.write("\t<p>批量接口POST内容，前面加上“<span class=\"text-danger\">v=1&c=</span>”，不同请求之间用回车<span class=\"text-danger\">ENTER</span>分隔，字段之间用<span class=\"text-danger\">TAB</span>分隔。</p>\n");
        out.write("\t\n");
        out.write("\t<table class=\"table table-bordered table-striped table-condensed  \">\n");
        out.write("\t\t<tr><th>实际名称</th><th>描述</th><th>类型</th></tr>\n");
        out.write("\t\t<tr><td>timestamp</td><td>发送数据时的时间戳</td><td>long</td></tr>\n");
        out.write("\t\t<tr><td>network</td><td>2G,3G,4G,WIFI (iOS只有3G和WIFI)</td><td>int</td></tr>\n");
        out.write("\t\t<tr><td>version</td><td>versionCode, eg. 6.8 = 680</td><td>int</td></tr>\n");
        out.write("\t\t<tr><td>platform</td><td>android=1 or ios=2</td><td>int</td></tr>\n");
        out.write("\t\t<tr><td>page</td><td>加载页面，eg. index.bin</td><td>String</td></tr>\n");
        out.write("\t\t<tr><td>step1-responseTime1</td><td>页面加载第1阶段及延时，eg. 1-300</td><td>String,responseTime单位为毫秒</td></tr>\n");
        out.write("\t\t<tr><td>step2-responseTime2</td><td>页面加载第2阶段及延时，eg. 1-300</td><td>String,responseTime单位为毫秒</td></tr>\n");
        out.write("\t\t<tr><td>.......</td><td>页面加载阶段及延时，eg. 1-300</td><td>String,responseTime单位为毫秒</td></tr>\n");
        out.write("\t\t<tr><td>stepN-responseTimeN</td><td>页面加载第N阶段及延时，eg. 1-300</td><td>String,responseTime单位为毫秒</td></tr>\n");
        out.write("\t</table>\n");
        out.write("\t\n");
        out.write("\t<pre>\n");
        out.write("\t单个请求格式如下:\n");
        out.write("\ttimstamp<span class=\"text-danger\">TAB</span>network<span class=\"text-danger\">TAB</span>version<span class=\"text-danger\">TAB</span>platform<span class=\"text-danger\">TAB</span>page<span class=\"text-danger\">TAB</span>step1-responseTime1<span class=\"text-danger\">TAB</span>step2-responseTime2<span class=\"text-danger\">TAB</span>step3-responseTime3<span class=\"text-danger\">ENTER</span>\n");
        out.write("\t\n");
        out.write("\t</pre>\n");
        out.write("\t<p>POST内容如果有如下5个请求，Sample的POST内容为</p>\n");
        out.write("\t<pre>\n");
        out.write("\tv=1&c=\n");
        out.write("\t1400037748152<span class=\"text-danger\">\\t</span>1<span class=\"text-danger\">\\t</span>680<span class=\"text-danger\">\\t</span>1<span class=\"text-danger\">\\t</span>page1<span class=\"text-danger\">\\t</span>1-20<span class=\"text-danger\">\\t</span>2-30<span class=\"text-danger\">\\t</span>3-40<span class=\"text-danger\">\\t</span>4-50<span class=\"text-danger\">\\n</span> \n");
        out.write("\t1400037748163<span class=\"text-danger\">\\t</span>1<span class=\"text-danger\">\\t</span>680<span class=\"text-danger\">\\t</span>1<span class=\"text-danger\">\\t</span>page2<span class=\"text-danger\">\\t</span>1-20<span class=\"text-danger\">\\t</span>2-30<span class=\"text-danger\">\\t</span>3-40<span class=\"text-danger\">\\t</span>4-50<span class=\"text-danger\">\\n</span> \n");
        out.write("\t1400037748174<span class=\"text-danger\">\\t</span>1<span class=\"text-danger\">\\t</span>680<span class=\"text-danger\">\\t</span>1<span class=\"text-danger\">\\t</span>pgae3<span class=\"text-danger\">\\t</span>1-20<span class=\"text-danger\">\\t</span>2-30<span class=\"text-danger\">\\t</span>3-40<span class=\"text-danger\">\\t</span>4-50<span class=\"text-danger\">\\n</span> \n");
        out.write("\t1400037748185<span class=\"text-danger\">\\t</span>1<span class=\"text-danger\">\\t</span>680<span class=\"text-danger\">\\t</span>1<span class=\"text-danger\">\\t</span>page4<span class=\"text-danger\">\\t</span>1-20<span class=\"text-danger\">\\t</span>2-30<span class=\"text-danger\">\\t</span>3-40<span class=\"text-danger\">\\t</span>4-50<span class=\"text-danger\">\\n</span> \n");
        out.write("\t1400037748196<span class=\"text-danger\">\\t</span>1<span class=\"text-danger\">\\t</span>680<span class=\"text-danger\">\\t</span>1<span class=\"text-danger\">\\t</span>page5<span class=\"text-danger\">\\t</span>1-20<span class=\"text-danger\">\\t</span>2-30<span class=\"text-danger\">\\t</span>3-40<span class=\"text-danger\">\\t</span>4-50<span class=\"text-danger\">\\n</span>\n");
        out.write("\t</pre>\t\n");
        out.write("</br>\n");
        out.write("\n");
        out.write("<h4 class=\"text-danger\">APP Crash日志接口</h4>\n");
        out.write("\t<pre>\thttp://{ip}/broker-service/api/crash</pre>\n");
        out.write("\t<table class=\"table table-bordered table-striped table-condensed  \">\n");
        out.write("\t\t<tr><th>参数名</th><th>描述</th><th>类型</th></tr>\n");
        out.write("\t\t<tr><td>mt</td><td>手机类型，andriod传入1，ios传入2</td><td>int</td></tr>\n");
        out.write("\t\t<tr><td>av</td><td>APP的版本号，比如1.0.0</td><td>String</td></tr>\n");
        out.write("\t\t<tr><td>pv</td><td>平台版本，比如7.0.1</td><td>String</td></tr>\n");
        out.write("\t\t<tr><td>m</td><td>模块名，支持模块区分</td><td>String</td></tr>\n");
        out.write("\t\t<tr><td>msg</td><td>crash的简单原因，后续统计根据msg进行分类，比如NullPointException</td><td>String</td></tr>\n");
        out.write("\t\t<tr><td>l</td><td>错误等级，默认值可以传warning、error可以用来进行错误区分</td><td>String</td></tr>\n");
        out.write("\t\t<tr><td>d</td><td>详细的错误日志</td><td>String</td></tr>\n");
        out.write("\t</table>\n");
        out.write("\t\n");
        out.write("\t<p class=\"text-danger\">参数可以post上来，需要对value进行encode。</p>\n");
        out.write("\t<p class=\"text-danger\">如下手机类型是ios，app版本号1.1，平台版本号1.2，模块是user，错误等级为error，错误原因为java.npe</p>\n");
        out.write("\t<pre>\n");
        out.write("\t\thttp://{ip}/broker-service/api/crash?mt=2&av=1.1&pv=1.2&m=user&msg=java.npe&l=error&d=dddddsfsdfsdfsdf\t\n");
        out.write("\t</pre>\n");
        out.write("</br>\n");
        out.write("\n");
        out.write("\n");
        out.write("<h4 class=\"text-danger\">APP 长连访问批量接口</h4>\n");
        out.write("\t<pre>\thttp://{ip}/broker-service/api/connection</pre>\n");
        out.write("\t<p>批量接口POST内容，前面加上“<span class=\"text-danger\">v=3&c=</span>”，不同请求之间用回车<span class=\"text-danger\">ENTER</span>分隔，字段之间用<span class=\"text-danger\">TAB</span>分隔。</p>\n");
        out.write("\t\n");
        out.write("\t<table class=\"table table-bordered table-striped table-condensed  \">\n");
        out.write("\t\t<tr><th>实际名称</th><th>描述</th><th>类型</th></tr>\n");
        out.write("\t\t<tr><td>timestamp</td><td>发送数据时的时间戳</td><td>long</td></tr>\n");
        out.write("\t\t<tr><td>network</td><td>2G,3G,4G,WIFI(iOS只有3G和WIFI)，1=wifi, 2=2G, 3=3G, 4=4G, 0=Unknown</td><td>int</td></tr>\n");
        out.write("\t\t<tr><td>version</td><td>versionCode,比如6.8=680,只支持int类型</td><td>int</td></tr>\n");
        out.write("\t\t<tr><td>tunnel</td><td>固定为1，表示是长连</td><td>int</td></tr>\n");
        out.write("\t\t<tr><td>command</td><td>接口，一般为url path的最后一个单位(shop.bin)</td><td>String</td></tr>\n");
        out.write("\t\t<tr><td>code</td><td>status code,建议区分http的返回码,比如>1000为业务错误码,<1000为网络错误码,<0为自定义错误码</td><td>int</td></tr>\n");
        out.write("\t\t<tr><td>platform</td><td>android=1,ios=2,Unknown=0</td><td>int</td></tr>\n");
        out.write("\t\t<tr><td>requestbyte</td><td>发送字节数</td><td>int</td></tr>\n");
        out.write("\t\t<tr><td>responsebyte</td><td>返回字节数</td><td>int</td></tr>\n");
        out.write("\t\t<tr><td>responsetime</td><td>用时 (毫秒）</td><td>int</td></tr>\n");
        out.write("\t</table>\n");
        out.write("\t\n");
        out.write("\t<pre>\n");
        out.write("\t单个请求格式如下\n");
        out.write("\ttimstamp<span class=\"text-danger\">TAB</span>network<span class=\"text-danger\">TAB</span>version<span class=\"text-danger\">TAB</span>tunnel<span class=\"text-danger\">TAB</span>command<span class=\"text-danger\">TAB</span>code<span class=\"text-danger\">TAB</span>platform<span class=\"text-danger\">TAB</span>requestbyte<span class=\"text-danger\">TAB</span>responsebyte<span class=\"text-danger\">TAB</span>responsetime<span class=\"text-danger\">ENTER</span>\n");
        out.write("\t\n");
        out.write("\t新版本加入了接入点IP\n");
        out.write("\t</pre>\n");
        out.write("\t<p>POST内容如果有如下5个请求，Sample的POST内容为，</p>\n");
        out.write("\t<p class=\"text-danger\">v=2&c=不需要做urlencode，后面的批量的content部分需要urlencode。</p>\n");
        out.write("\t<pre>\n");
        out.write("\tv=3&c=\n");
        out.write("\t1400037748152<span class=\"text-danger\">\\t</span>1<span class=\"text-danger\">\\t</span>680<span class=\"text-danger\">\\t</span>1<span class=\"text-danger\">\\t</span>shop.bin<span class=\"text-danger\">\\t</span>200<span class=\"text-danger\">\\t</span>1<span class=\"text-danger\">\\t</span>100<span class=\"text-danger\">\\t</span>100<span class=\"text-danger\">\\t</span>200<span class=\"text-danger\">\\n</span> \n");
        out.write("\t1400037748163<span class=\"text-danger\">\\t</span>1<span class=\"text-danger\">\\t</span>680<span class=\"text-danger\">\\t</span>1<span class=\"text-danger\">\\t</span>shop.bin<span class=\"text-danger\">\\t</span>200<span class=\"text-danger\">\\t</span>2<span class=\"text-danger\">\\t</span>120<span class=\"text-danger\">\\t</span>110<span class=\"text-danger\">\\t</span>300<span class=\"text-danger\">\\n</span> \n");
        out.write("\t1400037748174<span class=\"text-danger\">\\t</span>1<span class=\"text-danger\">\\t</span>680<span class=\"text-danger\">\\t</span>1<span class=\"text-danger\">\\t</span>shop.bin<span class=\"text-danger\">\\t</span>200<span class=\"text-danger\">\\t</span>3<span class=\"text-danger\">\\t</span>110<span class=\"text-danger\">\\t</span>120<span class=\"text-danger\">\\t</span>200<span class=\"text-danger\">\\n</span> \n");
        out.write("\t1400037748185<span class=\"text-danger\">\\t</span>1<span class=\"text-danger\">\\t</span>680<span class=\"text-danger\">\\t</span>1<span class=\"text-danger\">\\t</span>shop.bin<span class=\"text-danger\">\\t</span>200<span class=\"text-danger\">\\t</span>1<span class=\"text-danger\">\\t</span>120<span class=\"text-danger\">\\t</span>130<span class=\"text-danger\">\\t</span>100<span class=\"text-danger\">\\n</span> \n");
        out.write("\t1400037748196<span class=\"text-danger\">\\t</span>1<span class=\"text-danger\">\\t</span>680<span class=\"text-danger\">\\t</span>1<span class=\"text-danger\">\\t</span>shop.bin<span class=\"text-danger\">\\t</span>500<span class=\"text-danger\">\\t</span>2<span class=\"text-danger\">\\t</span>110<span class=\"text-danger\">\\t</span>140<span class=\"text-danger\">\\t</span>200<span class=\"text-danger\">\\n</span>\n");
        out.write("\t</pre>\t\n");
        out.write("</br>\n");
        out.write("\n");
        out.write("<h4 class=\"text-danger\">JS 错误接口</h4>\n");
        out.write("\t<pre>\thttp://{ip}/broker-service/api/js</pre>\n");
        out.write("\t\n");
        out.write("\t<p>参数说明</p>\n");
        out.write("\t<table style=\"width:70%\" class=\"table table-bordered table-striped table-condensed  \">\n");
        out.write("\t\t<tr><th>query名</th><th>实际名称</th><th>描述</th><th>类型</th></tr>\t\n");
        out.write("\t\t<tr><td>v</td><td>version</td><td>API版本号</td><td>暂定为1</td></tr>\n");
        out.write("\t\t<tr><td>timestamp</td><td>timestamp</td><td>发生时间</td><td>long型，1970到现在的毫秒数</td></tr>\n");
        out.write("\t\t<tr><td>error</td><td>error</td><td>错误的类型</td><td>String</td></tr>\n");
        out.write("\t\t<tr><td>file</td><td>file</td><td>错误的发生的js文件</td><td>String</td></tr>\n");
        out.write("\t\t<tr><td>url</td><td>url</td><td>错误的发生的html页面</td><td>String</td></tr>\n");
        out.write("\t\t<tr><td>line</td><td>line</td><td>错误的行数</td><td>int</td></tr>\n");
        out.write("\t\t<tr><td>data</td><td>data</td><td>data类型</td><td>String，如果没有的话，传空串</td></tr>\n");
        out.write("\t</table>\n");
        out.write("\t</br>\n");
        out.write("<h4 class=\"text-danger\">CDN监控接口</h4>\n");
        out.write("\t<pre>\thttp://{ip}/broker-service/api/cdn</pre>\n");
        out.write("\t\n");
        out.write("\t批量接口POST内容，前面加上v=1&c=，不同请求之间用回车<span class=\"text-danger\">ENTER</span>分隔，字段之间用<span class=\"text-danger\">TAB</span>分隔。\n");
        out.write("\n");
        out.write("\t<pre>\n");
        out.write("\ttimstamp<span class=\"text-danger\">TAB</span>targetUrl<span class=\"text-danger\">TAB</span>dnslookup<span class=\"text-danger\">TAB</span>tcpconnect<span class=\"text-danger\">TAB</span>request<span class=\"text-danger\">TAB</span>response<span class=\"text-danger\">ENTER</span>\n");
        out.write("\t\n");
        out.write("\tsample如下:\n");
        out.write("\t\n");
        out.write("\tv=1&c=\n");
        out.write("\t1400037748182<span class=\"text-danger\">TAB</span>cdn-resource1<span class=\"text-danger\">TAB</span>300<span class=\"text-danger\">TAB</span>200<span class=\"text-danger\">TAB</span>300<span class=\"text-danger\">TAB</span>300<span class=\"text-danger\">ENTER</span>\n");
        out.write("\t1400037748182<span class=\"text-danger\">TAB</span>cdn-resource2<span class=\"text-danger\">TAB</span>300<span class=\"text-danger\">TAB</span>200<span class=\"text-danger\">TAB</span>300<span class=\"text-danger\">TAB</span>300<span class=\"text-danger\">ENTER</span>\n");
        out.write("\t1400037748182<span class=\"text-danger\">TAB</span>cdn-resource3<span class=\"text-danger\">TAB</span>300<span class=\"text-danger\">TAB</span>200<span class=\"text-danger\">TAB</span>300<span class=\"text-danger\">TAB</span>300<span class=\"text-danger\">ENTER</span>\n");
        out.write("\t</pre>\n");
        out.write("\t\n");
        out.write("\t<p>参数说明</p>\n");
        out.write("\t<table style=\"width:70%\" class=\"table table-bordered table-striped table-condensed  \">\n");
        out.write("\t\t<tr><th>实际名称</th><th>描述</th><th>类型</th></tr>\t\n");
        out.write("\t\t<tr><td>v</td><td>API版本号</td><td>暂定为1</td></tr>\n");
        out.write("\t\t<tr><td>c</td><td>具体内容</td><td>content内容</td></tr>\n");
        out.write("\t</table>\n");
        out.write("\t<p>content内容说明</p>\n");
        out.write("\t<pre>\n");
        out.write("\ttimstamp<span class=\"text-danger\">TAB</span>targetUrl<span class=\"text-danger\">TAB</span>dnslookup<span class=\"text-danger\">TAB</span>tcpconnect<span class=\"text-danger\">TAB</span>request<span class=\"text-danger\">TAB</span>response<span class=\"text-danger\">ENTER</span>\n");
        out.write("\t</pre>\n");
        out.write("\t<table style=\"width:70%\" class=\"table table-bordered table-striped table-condensed  \">\n");
        out.write("\t\t<tr><th>实际名称</th><th>描述</th><th>类型</th></tr>\t\n");
        out.write("\t\t<tr><td>timestamp</td><td>发生时间</td><td>long型，1970到现在的毫秒数</td></tr>\n");
        out.write("\t\t<tr><td>targetUrl</td><td>具体的cdn资源</td><td>cdn资源的一个定义</td></tr>\n");
        out.write("\t\t<tr><td>dnslookup</td><td>dns寻址时间</td><td>int</td></tr>\n");
        out.write("\t\t<tr><td>tcpConnect</td><td>tcp连接建立</td><td>int</td></tr>\n");
        out.write("\t\t<tr><td>request</td><td>请求时间</td><td>int</td></tr>\n");
        out.write("\t\t<tr><td>response</td><td>接受时间</td><td>int</td></tr>\n");
        out.write("\t</table>\n");
        out.write("<br/>\n");
        out.write("<h4 class=\"text-success\">URL规则配置&nbsp;  <a target=\"_blank\" href=\"/cat/s/config?op=urlPatternUpdate\">链接</a></h4>\n");
        out.write("\n");
        out.write("<table style=\"width:70%\" class=\"table table-bordered table-striped table-condensed  \">\n");
        out.write("\t<tr><th>ID</th><th>描述</th></tr>\n");
        out.write("\t<tr><td>唯一ID</td><td>不能有特殊字符，仅限于英文字母和-</td></tr>\t\n");
        out.write("\t<tr><td>所属组</td><td>分析时不起作用，仅仅用作url的分组，用于展示目的</td></tr>\t\n");
        out.write("\t<tr><td>Pattern名</td><td>支持完全匹配方式，比如http://m.api.dianping.com/searchshop.api， \n");
        out.write("部分匹配，比如 http://www.dianping.com/{City}/food，{City}可以匹配任何字符串</td></tr>\t\n");
        out.write("</table>\n");
        out.write("<br/>\n");
        out.write("<h4 class=\"text-danger\">APP监控报表获取&nbsp;&nbsp;&nbsp;&nbsp; </h4>\n");
        out.write("<p>Cat支持其它系统通过调用HTTP API来获取APP监控报表数据（JSON格式）</p>\n");
        out.write("<pre>\n");
        out.write("\thttp请求方式: GET或者POST\n");
        out.write("\thttp://主机域名:端口/cat/r/app?\n");
        out.write("</pre>\n");
        out.write("<p>参数说明</p>\n");
        out.write("<table style=\"width:70%\" class=\"table table-bordered table-striped table-condensed  \">\n");
        out.write("\t<tr><th width=\"30%\">参数</th><th width=\"70%\">说明</th></tr>\t\n");
        out.write("\t<tr><td>op</td><td>linechartJson[查看API访问趋势、运营活动趋势]、piechartJson[查看访问量分布]<span class=\"text-danger\">  必需</span></td></tr>\n");
        out.write("\t<tr><td>其他参数</td><td>参考端到端APP监控文档，除了op参数不同，其他均相同，可直接复用<span class=\"text-danger\">  必需</span></td></tr>\n");
        out.write("</table>\n");
        out.write("<p> url示例<span class=\"text-danger\">（红色部分为不同参数，没有op则需要添加，其他参数相同）</span></p>\n");
        out.write("<pre>\n");
        out.write("\thttp://cat.dianpingoa.com/cat/r/app?<span class=\"text-danger\">op=view</span>&query1=2014-10-28;1;;;;;;;;;&query2=&type=request&groupByField=&sort=&domains=default&commandId=1&domains2=default&commandId2=1 为APP监控查看的URL链接\n");
        out.write("\t则获取报表的URL为：\n");
        out.write("\thttp://cat.dianpingoa.com/cat/r/app?<span class=\"text-danger\">op=linechartJson&</span>query1=2014-10-28;1;;;;;;;;;&query2=&type=request&groupByField=&sort=&domains=default&commandId=1&domains2=default&commandId2=1</pre>\n");
        out.write("<br>\n");
        out.write("<h4 class=\"text-danger\">WEB监控报表获取&nbsp;&nbsp;&nbsp;&nbsp; </h4>\n");
        out.write("<p>Cat支持其它系统通过调用HTTP API来获取WEB监控报表数据（JSON格式）</p>\n");
        out.write("<pre>\n");
        out.write("\thttp请求方式: GET或者POST\n");
        out.write("\thttp://主机域名:端口/cat/r/web?\n");
        out.write("</pre>\n");
        out.write("<p>参数说明</p>\n");
        out.write("<table style=\"width:70%\" class=\"table table-bordered table-striped table-condensed  \">\n");
        out.write("\t<tr><th width=\"30%\">参数</th><th width=\"70%\">说明</th></tr>\t\n");
        out.write("\t<tr><td>op</td><td>json<span class=\"text-danger\">  必需</span></td></tr>\n");
        out.write("\t<tr><td>其他参数</td><td>参考端到端WEB监控文档，除了op参数不同，其他均相同，可直接复用<span class=\"text-danger\">  必需</span></td></tr>\n");
        out.write("</table>\n");
        out.write("<p> url示例<span class=\"text-danger\">（红色部分为不同参数，没有op则需要添加，其他参数相同）</span></p>\n");
        out.write("<pre>\n");
        out.write("\thttp://cat.dianpingoa.com/cat/r/web?<span class=\"text-danger\">op=view&</span>url=s1-small-dnsLookup&group=cdn-s1&city=上海市-&type=info&channel=&startDate=2014-10-28%2016:00&endDate=2014-10-28%2019:00 为APP监控查看的URL链接\n");
        out.write("\t则获取报表的URL为：\n");
        out.write("\thttp://cat.dianpingoa.com/cat/r/web?<span class=\"text-danger\">op=json&</span>url=s1-small-dnsLookup&group=cdn-s1&city=上海市-&type=info&channel=&startDate=2014-10-28%2016:00&endDate=2014-10-28%2019:00\n");
        out.write("</pre>\n");
        out.write("\n");
        out.write("\n");
        out.write("\n");
        out.write("\t\n");
        out.write("\t\n");
        out.write("\t");
        out.write("</div>\n");
        out.write("    <div class=\"tab-pane active\"  id=\"interfaceDocoument7\">");
        out.write("\n");
        out.write("<h4>Heartbeat的扩展接口</h4>\n");
        out.write("<p>监控单台机器内的一些数据指标，cat按照一分钟的粒度进行上报，服务端统一做展示。</p>\n");
        out.write("<h5 class=\"text-success\">适用场景</h5>\n");
        out.write("<p>1,监控当前一个业务线程状态</p>\n");
        out.write("<p>2,监控jvm内部一个队列长度</p>\n");
        out.write("<p>3,监控jvm当前数据库连接数等</p>\n");
        out.write("<p>4,监控业务内部一个技术指标等</p>\n");
        out.write("\n");
        out.write("<h5>例子</h5>\n");
        out.write("<xmp>\n");
        out.write("package com.dianping.cat.status;\n");
        out.write("\n");
        out.write("import java.util.HashMap;\n");
        out.write("import java.util.Map;\n");
        out.write("\n");
        out.write("import org.codehaus.plexus.personality.plexus.lifecycle.phase.Initializable;\n");
        out.write("import org.codehaus.plexus.personality.plexus.lifecycle.phase.InitializationException;\n");
        out.write("\n");
        out.write("public class HeartbeatExtenstion implements StatusExtension, Initializable {\n");
        out.write("\n");
        out.write("\t//给当前的类定义一个ID\n");
        out.write("\t@Override\n");
        out.write("\tpublic String getId() {\n");
        out.write("\t\treturn \"MyTestId\";\n");
        out.write("\t}\n");
        out.write("\n");
        out.write("\t//一个简单描述\n");
        out.write("\t@Override\n");
        out.write("\tpublic String getDescription() {\n");
        out.write("\t\treturn \"MyDescription\";\n");
        out.write("\t}\n");
        out.write("\n");
        out.write("\t//注意，只有valude值可以被转化double类型的才会在heartbeat做图形展示\n");
        out.write("\t@Override\n");
        out.write("\tpublic Map<String, String> getProperties() {\n");
        out.write("\t\tMap<String, String> maps = new HashMap<String, String>();\n");
        out.write("\n");
        out.write("\t\tmaps.put(\"key1\", String.valueOf(1));\n");
        out.write("\t\tmaps.put(\"key2\", String.valueOf(2));\n");
        out.write("\t\tmaps.put(\"key3\", String.valueOf(3));\n");
        out.write("\n");
        out.write("\t\treturn maps;\n");
        out.write("\t}\n");
        out.write("\n");
        out.write("\t//这里是实现了初始化方法，把这个实现注册到cat上，如果你使用spring，需要在spring里面注册此bean，并实现初始化方法。\n");
        out.write("\t@Override\n");
        out.write("\tpublic void initialize() throws InitializationException {\n");
        out.write("\t\tStatusExtensionRegister.getInstance().register(this);\n");
        out.write("\t}\n");
        out.write("}\n");
        out.write("\n");
        out.write("</xmp>\n");
        out.write("<h5 class=\"text-success\">结果展示</h5>\n");
        out.write("cat服务端会将一个extension id作为一个group，然后将每个key指标都会做图形处理，结果会在cat的heartbeat中进行展示如下\n");
        out.write("<img  class=\"img-polaroid\"  src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/heartbeat02.png\" width=\"100%\"/>\n");
        out.write("\n");
        out.write("</div>\n");
        out.write("    <div class=\"tab-pane\" id=\"interfaceDocoument2\">");
        out.write("\n");
        out.write("<h4 class=\"text-danger\">变更监控文档</h4>\n");
        out.write("<h4 class=\"text-info\">记录及展示变更内容</h4>\n");
        out.write("<h4 class=\"text-success\">HTTP API调用方式</h4>\n");
        out.write("<p>接口调用请求说明(插入数据)</p>\n");
        out.write("<pre>\n");
        out.write("\thttp请求方式: GET或者POST\n");
        out.write("\thttp://主机域名:端口/cat/r/alteration?\n");
        out.write("</pre>\n");
        out.write("<p>参数说明</p>\n");
        out.write("<table style=\"width:50%\" class=\"table table-bordered table-striped table-condensed  \">\n");
        out.write("\t<tr><th width=\"30%\">参数</th><th width=\"70%\">说明</th></tr>\t\n");
        out.write("\t<tr><td>op</td><td>执行操作<span class=\"text-danger\">  必需[唯一值：insert]</span></td></tr>\n");
        out.write("\t<tr><td>type</td><td>变更类型<span class=\"text-danger\">  必需[可能值：puppet, workflow, lazyman]</span></td></tr>\n");
        out.write("\t<tr><td>title</td><td>变更标题<span class=\"text-danger\">  必需</span></td></tr>\n");
        out.write("\t<tr><td>domain</td><td>变更项目<span class=\"text-danger\">  必需</span></td></tr>\n");
        out.write("\t<tr><td>hostname</td><td>变更机器域名<span class=\"text-danger\">  必需</span></td></tr>\t\n");
        out.write("\t<tr><td>alterationDate</td><td>变更时间<span class=\"text-danger\">  必需[格式如：2014-03-30 00:00:00]</span></td></tr>\n");
        out.write("\t<tr><td>user</td><td>发起变更用户<span class=\"text-danger\">  必需</span></td></tr>\n");
        out.write("\t<tr><td>content</td><td>变更内容<span class=\"text-danger\">  必需</span></td></tr>\n");
        out.write("\t<tr><td>group</td><td>变更组别<span class=\"text-success\">  可选</span></td></tr>\n");
        out.write("\t<tr><td>ip</td><td>变更机器ip<span class=\"text-success\">  可选</span></td></tr>\n");
        out.write("\t<tr><td>url</td><td>变更连接<span class=\"text-success\">  可选</span></td></tr>\n");
        out.write("</table>\n");
        out.write("\n");
        out.write("<p> url示例（get方式）</p>\n");
        out.write("<pre>\n");
        out.write("\thttp://主机域名:端口/cat/r/alteration?op=insert&type=puppet&title=2&domain=3&hostname=1&alterationDate=2013-02-19%2000:00:00&user=5&content=6&group=&ip=&url=\n");
        out.write("</pre>\n");
        out.write("<p>返回说明</p>\n");
        out.write("<pre>\n");
        out.write("\t<span class=\"text-success\">{\"status\":200} ——> 成功</span>\n");
        out.write("\t<span class=\"text-danger\">{\"status\":500, \"errorMessage\":\"lack args\"} ——> 失败 [必需参数不全]</span>\n");
        out.write("\t<span class=\"text-danger\">{\"status\":500} ——> 失败 [其它错误]</span>\n");
        out.write("</pre>\n");
        out.write("</br>\n");
        out.write("\n");
        out.write("</div>\n");
        out.write("    <div class=\"tab-pane\" id=\"interfaceDocoument3\">");
        out.write("\n");
        out.write("<h4 class=\"text-danger\">告警Http API</h4>\n");
        out.write("<p>Cat支持其它系统通过调用HTTP API来发送信息。目前支持三种发送渠道：邮件、短信、微信（需要邮箱和“爱点评”微信订阅号绑定）</p>\n");
        out.write("<pre>\n");
        out.write("\thttp请求方式: GET或者POST\n");
        out.write("\thttp://主机域名:端口/cat/r/alert?\n");
        out.write("</pre>\n");
        out.write("<p>参数说明</p>\n");
        out.write("<table style=\"width:50%\" class=\"table table-bordered table-striped table-condensed  \">\n");
        out.write("\t<tr><th width=\"30%\">参数</th><th width=\"70%\">说明</th></tr>\t\n");
        out.write("\t<tr><td>op</td><td>执行操作<span class=\"text-danger\">  必需[唯一值：alert]</span></td></tr>\n");
        out.write("\t<tr><td>channel</td><td>渠道类型<span class=\"text-danger\">  必需[可能值：mail, sms, weixin]</span></td></tr>\n");
        out.write("\t<tr><td>title</td><td>告警标题<span class=\"text-danger\">  必需</span></td></tr>\n");
        out.write("\t<tr><td>content</td><td>告警内容<span class=\"text-danger\">  短信可选，邮件、微信必需</span></td></tr>\n");
        out.write("\t<tr><td>group</td><td>告警组名<span class=\"text-danger\">  微信必需，短信、邮件可选</span></td></tr>\t\n");
        out.write("\t<tr><td>type</td><td>告警类型<span class=\"text-danger\">  必需[可能值：network, business, exception, system, thirdParty, frontEndException]</span></td></tr>\n");
        out.write("\t<tr><td>receivers</td><td>接收人<span class=\"text-danger\">  必需[邮箱地址或者手机号；如有多个接收人，用半角逗号分割]</span></td></tr>\n");
        out.write("</table>\n");
        out.write("\n");
        out.write("<p> url示例（get方式）</p>\n");
        out.write("<pre>\n");
        out.write("\thttp://cat.dianpingoa.com/cat/r/alert?op=alert&channel=mail&title=test&content=testcontent&group=cat&type=test&receivers=leon.li@dianping.com\n");
        out.write("</pre>\n");
        out.write("<p>返回说明</p>\n");
        out.write("<pre>\n");
        out.write("\t<span class=\"text-success\">{\"status\":200} ——> 成功</span>\n");
        out.write("\t<span class=\"text-danger\">{\"status\":500, \"errorMessage\":\"lack receivers\"} ——> 失败 [接收人receivers未填写或者格式错误]</span>\n");
        out.write("\t<span class=\"text-danger\">{\"status\":500, \"errorMessage\":\"send failed, please check your channel argument\"} ——> 失败 [渠道channel错误，请指定mail,sms,weixin三者中的一种渠道]</span>\n");
        out.write("\t<span class=\"text-danger\">{\"status\":500, \"errorMessage\":\"send failed, please retry again\"} ——> 失败 [发送异常]</span>\n");
        out.write("</pre>\n");
        out.write("</br>");
        out.write("</div>\n");
        out.write("    <div class=\"tab-pane\" id=\"interfaceDocoument4\">");
        out.write("\n");
        out.write("<h4>HTTP API调用方式</h4>\n");
        out.write("<p>接口调用请求说明</p>\n");
        out.write("<pre>\n");
        out.write("\thttp请求方式: GET（请使用http协议）\n");
        out.write("\thttp://cat.dianpingoa.com/cat/r/monitor?\n");
        out.write("</pre>\n");
        out.write("<p>参数说明</p>\n");
        out.write("<table style=\"width:90%\" class=\"table table-bordered table-striped table-condensed  \">\n");
        out.write("\t<tr><th width=\"30%\">参数</th><th>说明</th></tr>\n");
        out.write("\t<tr><td>group</td><td>监控组唯一ID名称，<span class=\"text-danger\">必需，仅仅包括字母、数字，不能包含特殊字符，比如引号，冒号等。建议TuanGou这类命名方式</span></td></tr>\n");
        out.write("\t<tr><td>domain</td><td>应用唯一ID名称，<span class=\"text-danger\">必需，仅仅包括字母、数字，不能包含特殊字符，比如引号，冒号等。建议用TuanGouWeb这类命名方式</span></td></tr>\n");
        out.write("\t<tr><td>key</td><td>监控业务唯一ID名称，<span class=\"text-danger\">必需，仅仅包括字母、数字，不能包含特殊字符，比如引号，冒号等。建议用PayCount这类命名方式</span></td></tr>\n");
        out.write("\t<tr><td>timestamp</td><td>时间戳,<span class=\"text-danger\">必需，仅仅为数字。如果缺失，选取服务器当前时间</span></td></tr>\n");
        out.write("\t<tr><td>op</td><td>sum，avg，count[<span class=\"text-danger\">默认</span>]</td></tr>\n");
        out.write("\t<tr><td>count</td><td>op=count时所需，<span class=\"text-danger\">默认为1</span></td></tr>\n");
        out.write("\t<tr><td>sum</td><td>op=sum时所需，<span class=\"text-danger\">默认为0</span></td></tr>\n");
        out.write("\t<tr><td>avg</td><td>op=avg时所需，<span class=\"text-danger\">默认为0</span></td></tr>\n");
        out.write("</table>\n");
        out.write("\n");
        out.write("<p> 1).op = count时，用于记录一个指标值出现的次数</p>\n");
        out.write("<pre>\n");
        out.write("\thttp://cat.dianpingoa.com/cat/r/monitor?timestamp=1404815988&group=myGroup&domain=myApp&key=myKey&op=count\n");
        out.write("</pre>\n");
        out.write("<p> 2).op = avg时，用于记录一个指标出现的平均值</p>\n");
        out.write("<pre>\n");
        out.write("\thttp://cat.dianpingoa.com/cat/r/monitor?timestamp=1404815988&group=myGroup&domain=myApp&key=myKey&op=avg&avg=500\n");
        out.write("</pre>\n");
        out.write("<p> 3).op = sum时，用于记录一个指标出现的总和</p>\n");
        out.write("<pre>\n");
        out.write("\thttp://cat.dianpingoa.com/cat/r/monitor?timestamp=1404815988&group=myGroup&domain=myApp&key=myKey&op=sum&sum=500\n");
        out.write("</pre>\n");
        out.write("<p> 4).op = batch时，用于批量提交指标。（TAB、ENTER分别是制表符和换行符）</p>\n");
        out.write("<pre>\n");
        out.write("\thttp://cat.dianpingoa.com/cat/r/monitor?op=batch&batch=group<span class=\"text-danger\">TAB</span>domain<span class=\"text-danger\">TAB</span>key<span class=\"text-danger\">TAB</span>type<span class=\"text-danger\">TAB</span>time<span class=\"text-danger\">TAB</span>value<span class=\"text-danger\">ENTER</span>\n");
        out.write("\tgroup<span class=\"text-danger\">TAB</span>domain<span class=\"text-danger\">TAB</span>key<span class=\"text-danger\">TAB</span>type<span class=\"text-danger\">TAB</span>time<span class=\"text-danger\">TAB</span>value<span class=\"text-danger\">ENTER</span>\n");
        out.write("</pre>\n");
        out.write("<p>返回说明</p>\n");
        out.write("<pre>\n");
        out.write("\t<span class=\"text-danger\">{\"statusCode\":\"-1\",\"errorMsg\":\"Unknown [ domain,group,key ] name!\"} ——> 失败 [必需参数缺失]</span>\n");
        out.write("\t<span class=\"text-success\">{\"statusCode\":\"0\"} ——> 成功</span>\n");
        out.write("</pre>");
        out.write("</div>\n");
        out.write("    <div class=\"tab-pane\" id=\"interfaceDocoument5\">");
        out.write("\n");
        out.write("<h4 class=\"text-danger\">APP命令字添加/删除API&nbsp;&nbsp;&nbsp;&nbsp; </h4>\n");
        out.write("<p>Cat支持其它系统通过调用HTTP API来添加、删除APP命令字</p>\n");
        out.write("<pre>\n");
        out.write("\thttp请求方式: GET或者POST\n");
        out.write("\thttp://主机域名:端口/cat/r/app?\n");
        out.write("</pre>\n");
        out.write("<p>参数说明</p>\n");
        out.write("<table style=\"width:70%\" class=\"table table-bordered table-striped table-condensed  \">\n");
        out.write("\t<tr><th width=\"30%\">参数</th><th width=\"70%\">说明</th></tr>\t\n");
        out.write("\t<tr><td>op</td><td>执行操作<span class=\"text-danger\">  必需[增加Command:appAdd 删除Command:appDelete]</span></td></tr>\n");
        out.write("\t<tr><td>name</td><td>命令字名称<span class=\"text-danger\">  必需</span></td></tr>\n");
        out.write("\t<tr><td>domain</td><td>所属项目<span class=\"text-danger\">  可选</span></td></tr>\n");
        out.write("\t<tr><td>title</td><td>命令字标题<span class=\"text-danger\">  可选[建议添加，便于查看]</span></td></tr>\n");
        out.write("</table>\n");
        out.write("<p> url示例（get方式）</p>\n");
        out.write("<pre>\n");
        out.write("\thttp://cat.dianpingoa.com/cat/r/app?op=appAdd&domain=testDomain&name=testName&title=testTitle\n");
        out.write("\thttp://cat.dianpingoa.com/cat/r/app?op=appDelete&domain=testDomain&name=testName&title=testTitle\n");
        out.write("</pre>\n");
        out.write("<p>返回说明</p>\n");
        out.write("<pre>\n");
        out.write("\t<span class=\"text-success\">{\"status\":200} ——> 成功</span>\n");
        out.write("\t<span class=\"text-danger\">{\"status\":500} ——> 失败</span>\n");
        out.write("\t<span class=\"text-danger\">{\"status\":500, \"info\":\"name is required.\"} ——> 失败 [缺少name参数]</span>\n");
        out.write("</pre>\n");
        out.write("\n");
        out.write("<br/>\n");
        out.write("<h4 class=\"text-danger\">APP监控配置查询API&nbsp;&nbsp;&nbsp;&nbsp; </h4>\n");
        out.write("<p>Cat支持通过curl等方式获取APP监控配置（XML或JSON）</p>\n");
        out.write("<pre>\n");
        out.write("\thttp请求方式: GET或POST\n");
        out.write("\thttp://主机域名:端口/cat/r/app?\n");
        out.write("</pre>\n");
        out.write("<p>参数说明</p>\n");
        out.write("<table style=\"width:70%\" class=\"table table-bordered table-striped table-condensed  \">\n");
        out.write("\t<tr><th width=\"30%\">参数</th><th width=\"70%\">说明</th></tr>\t\n");
        out.write("\t<tr><td>op</td><td>执行操作<span class=\"text-danger\">  必需[为appConfigFetch]</span></td></tr>\n");
        out.write("\t<tr><td>type</td><td>配置格式<span class=\"text-danger\">  可选[默认为JSON]</span></td></tr>\n");
        out.write("</table>\n");
        out.write("<p> url示例（get方式）</p>\n");
        out.write("<pre>\n");
        out.write("\thttp://cat.dianpingoa.com/cat/r/app?op=appConfigFetch&type=json\n");
        out.write("\thttp://cat.dianpingoa.com/cat/r/app?op=appConfigFetch&type=xml\n");
        out.write("</pre>\n");
        out.write("<p>返回说明</p>\n");
        out.write("<pre>\n");
        out.write("\t<span class=\"text-success\">配置文件数据 ——> 成功</span>\n");
        out.write("\t<span class=\"text-danger\">空或其他错误 ——> 失败</span>\n");
        out.write("</pre>\n");
        out.write("<p class=\"text-danger\">注意，在浏览器中查看XML格式数据会显示为空，应该在代码中进行数据的读取。例如：</p>\n");
        out.write("<pre>\n");
        out.write("\tcurl -d \"type=xml\" http://cat.dianpingoa.com/cat/r/app?op=appConfigFetch\n");
        out.write("</pre>\n");
        out.write("\t\n");
        out.write("<br/>\n");
        out.write("\n");
        out.write("<h4 class=\"text-danger\">APP异常日志监控文档</h4>\n");
        out.write("<h5 class=\"text-info\"> a). 安卓版主APP日志发送到<span class=\"text-danger\">AndroidCrashLog</span>，苹果版主APP日志发送到<span class=\"text-danger\">iOSCrashLog</span></h5>\n");
        out.write("<h5 class=\"text-info\">&nbsp;&nbsp;&nbsp;&nbsp;安卓版点评管家日志发送到<span class=\"text-danger\">MerchantAndroidCrashLog</span>，苹果版点评管家日志发送到<span class=\"text-danger\">MerchantIOSCrashLog</span></h5>\n");
        out.write("<h5 class=\"text-info\"> b). 监控维度：平台类型、APP版本、平台版本、模块、错误级别</h5>\n");
        out.write("\n");
        out.write("\n");
        out.write("</br>\n");
        out.write("\n");
        out.write("<h4 class=\"text-success\">KEY的格式定义</h5>\n");
        out.write("\t<h5>以英文冒号隔开各维度的信息：【<span class=\"text-danger\">APP版本:平台版本:模块:错误级别</span>】</h5>\n");
        out.write("\t<p>如下表：</p>\n");
        out.write("\t<table style=\"width:40%\" class=\"table table-striped table-condensed  \">\n");
        out.write("\t\t<tr><th>字段</th><th>值</th></tr>\t\n");
        out.write("\t\t<tr><td>平台类型</td><td>Android</td></tr>\n");
        out.write("\t\t<tr><td>APP版本</td><td>6.9</td></tr>\n");
        out.write("\t\t<tr><td>平台版本</td><td>4.4.2</td></tr>\n");
        out.write("\t\t<tr><td>模块</td><td>moudle</td></tr>\n");
        out.write("\t\t<tr><td>错误级别</td><td>error</td></tr>\n");
        out.write("\t</table>\n");
        out.write("\t以下红色部分是需要根据自己业务做出相应修改的，这里只是示例。\n");
        out.write("\t<pre>\n");
        out.write("Transaction t = Cat.newTransaction(<span class=\"text-danger\">\"CrashLog\"</span>, <span class=\"text-danger\">\"Android\"</span>);\n");
        out.write("Cat.logEvent(\"Error\", <span class=\"text-danger\">\"java.lang.ArrayIndexOutOfBoundsException\"</span>, \"ERROR\", <span class=\"text-danger\">\"Crash log detail stack info ! e.g. new RunTimeException(\"AndroidCrashLog\").getMessage()\"</span>);<span class=\"text-success\">//前者表示异常类别，如下图Status；后者是具体的SampleLinks点开后的详细日志</span>\n");
        out.write("MessageTree tree = Cat.getManager().getThreadLocalMessageTree(); \n");
        out.write("((DefaultMessageTree) tree).setIpAddress(\"<span class=\"text-danger\">6.9:4.4.2:module:error</span>\"); <span class=\"text-success\">//红色部分为KEY</span>\n");
        out.write("((DefaultMessageTree) tree).setDomain(<span class=\"text-danger\">\"AndroidCrashLog\"</span>);  <span class=\"text-success\">//iOS版APP日志发送到iOSCrashLog</span>\n");
        out.write("t.complete();\n");
        out.write("\t</pre>\t\n");
        out.write("\t<h5> <a href=\"/cat/r/app?op=crashLog\">查看Log</a>，示例如下：</h5>\n");
        out.write("\t<img src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/crashLog.jpg\" width=\"100%\"/>\n");
        out.write("\n");
        out.write("</div>\n");
        out.write("    <div class=\"tab-pane\" id=\"interfaceDocoument6\">");
        out.write("\n");
        out.write("<h4 class=\"text-danger\">告警API&nbsp;&nbsp;&nbsp;&nbsp; </h4>\n");
        out.write("<p>Cat支持其它系统通过调用HTTP API来添加告警信息</p>\n");
        out.write("<pre>\n");
        out.write("\thttp请求方式: GET或者POST\n");
        out.write("\thttp://主机域名:端口/cat/r/alert?\n");
        out.write("</pre>\n");
        out.write("<p>参数说明</p>\n");
        out.write("<table style=\"width:70%\" class=\"table table-bordered table-striped table-condensed  \">\n");
        out.write("\t<tr><th width=\"30%\">参数</th><th width=\"70%\">说明</th></tr>\t\n");
        out.write("\t<tr><td>op</td><td>执行操作<span class=\"text-danger\">  必需[只能为insert]</span></td></tr>\n");
        out.write("\t<tr><td>domain</td><td>告警项目名<span class=\"text-danger\">  必需</span></td></tr>\n");
        out.write("\t<tr><td>level</td><td>告警级别<span class=\"text-danger\">  可选，默认为warning</span></td></tr>\n");
        out.write("\t<tr><td>category</td><td>告警类型<span class=\"text-danger\">  可选，默认为zabbix</span></td></tr>\n");
        out.write("\t<tr><td>alertTime</td><td>告警时间<span class=\"text-danger\">  可选，格式为yyyy-MM-dd HH:mm:ss(get方式需要转码),默认为插入时间</span></td></tr>\n");
        out.write("\t<tr><td>metric</td><td>告警指标<span class=\"text-danger\">  可选</span></td></tr>\n");
        out.write("\t<tr><td>content</td><td>告警内容<span class=\"text-danger\">  可选</span></td></tr>\n");
        out.write("</table>\n");
        out.write("<p> url示例（get方式）</p>\n");
        out.write("<pre>\n");
        out.write("\thttp://cat.dianpingoa.com/cat/r/alert?op=insert&domain=testDomain&level=warning&category=zabbix&metric=testMetric&content=testContent&alertTime=2014-01-01%2000:00:00\n");
        out.write("</pre>\n");
        out.write("<p>返回说明</p>\n");
        out.write("<pre>\n");
        out.write("\t<span class=\"text-success\">{\"status\":200} ——> 成功</span>\n");
        out.write("\t<span class=\"text-danger\">{\"status\":500} ——> 失败</span>\n");
        out.write("\t<span class=\"text-danger\">{\"status\":500, \"errorMessage\":\"lack domain\"} ——> 失败 [缺少domain参数]</span>\n");
        out.write("</pre>");
        out.write("</div>\n");
        out.write("    </div>\n");
        out.write("</div>\n");
        out.write("\n");
        out.write("\t   \t");
        int evalDoAfterBody = _jspx_th_c_005fwhen_005f7.doAfterBody();
        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
          break;
      } while (true);
    }
    if (_jspx_th_c_005fwhen_005f7.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.reuse(_jspx_th_c_005fwhen_005f7);
      throw new javax.servlet.jsp.SkipPageException();
    }
    _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.reuse(_jspx_th_c_005fwhen_005f7);
    return false;
  }

  private boolean _jspx_meth_c_005fwhen_005f8(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fchoose_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:when
    org.apache.taglibs.standard.tag.rt.core.WhenTag _jspx_th_c_005fwhen_005f8 = (org.apache.taglibs.standard.tag.rt.core.WhenTag) _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.WhenTag.class);
    _jspx_th_c_005fwhen_005f8.setPageContext(_jspx_page_context);
    _jspx_th_c_005fwhen_005f8.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fchoose_005f0);
    // /jsp/report/home/home.jsp(36,5) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005fwhen_005f8.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${payload.docName == 'develop'}", java.lang.Boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false)).booleanValue());
    int _jspx_eval_c_005fwhen_005f8 = _jspx_th_c_005fwhen_005f8.doStartTag();
    if (_jspx_eval_c_005fwhen_005f8 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
      do {
        out.write("\n");
        out.write("\t   \t\t");
        out.write("\n");
        out.write("<dl>\n");
        out.write("  <dt><h5 class=\"text-success\">1.CAT消息协议</h5></dt>\n");
        out.write("  <dd>CAT客户端可以向服务端发送Transaction, Event, Heartbeat三种消息. 消息的传输格式如下:\n");
        out.write("  \t  <xmp class=\"well\">Class Timestamp Type Name Status  Duration  Data</xmp>\n");
        out.write("  \t  <p>下例是某个实际传输的heartbeat消息:</p>\n");
        out.write("  \t  <xmp>H2012-04-26 16:00:42.775        Heartbeat       192.168.63.141  0  <os name=\"Mac OS X\" arch=\"x86_64\" version=\"Mac OS X\"/>\n");
        out.write("  \t  </xmp>\n");
        out.write("  \t  <table class=\"table table-striped table-condensed \">\n");
        out.write("  \t  \t<tr><td class=\"text-info\">Timestamp</td><td>记录消息产生的时刻, 格式\"yyyy-mm-dd HH:MM:SS.sss\".</td></tr>\n");
        out.write("  \t  \t<tr><td class=\"text-info\">Type</td><td>大小写敏感的字符串. 常见的Transaction type有 \"URL\", \"SQL\", \"Email\", \"Exec\"等. 常见的Event type有 \"Info\", \"Warn\", \"Error\", 还有\"Cat\"用来表示Cat内部的消息.</td></tr>\n");
        out.write("  \t  \t<tr><td class=\"text-info\">Name</td><td>大小写敏感的字符串. type和name的组合要满足全局唯一性. 常见的URL transaction type的name如 \"ViewItem\", \"MakeBid\", \"SignIn\"等. SQL transaction type的name如 \"AddFeedback\", \"GetAccountDetailUnit4\", \"IncrementFeedbackAndTotalScore\"等.</td></tr>\n");
        out.write("  \t  \t<tr><td class=\"text-info\">Status</td><td>大小写敏感的字符串. 0表示成功, 非零表示失败. 建议不要使用太长的字符串. Transaction start没有status字段.</td></tr>\n");
        out.write("  \t  \t<tr><td class=\"text-info\">Duration</td><td>精确到0.1毫秒. 表示transaction start和transaction end之间的时间长度. 仅出现在Transaction end或者Atomic Transaction. Event和Heartbeat没有duration字段.</td></tr>\n");
        out.write("  \t  \t<tr><td class=\"text-info\">Data</td><td>建议使用以&字符分割的name=value对组成的字符串列表. Transaction start没有data字段.</td></tr>\n");
        out.write("  \t  </table>\n");
        out.write("  </dd>\n");
        out.write("  \n");
        out.write("  <dt><h5 class=\"text-success\">2.Transaction</h5></dt>\n");
        out.write("  <dd>\n");
        out.write("  \t  <p class=\"text-danger\">a).transaction适合记录跨越系统边界的程序访问行为，比如远程调用，数据库调用，也适合执行时间较长的业务逻辑监控</p>\n");
        out.write("  \t  <p>b).某些运行期单元要花费一定时间完成工作, 内部需要其他处理逻辑协助, 我们定义为Transaction.</p>\n");
        out.write("      <p>c).Transaction可以嵌套(如http请求过程中嵌套了sql处理). </p>\n");
        out.write("      <p>d).大部分的Transaction可能会失败, 因此需要一个结果状态码. </p>\n");
        out.write("      <p>e).如果Transaction开始和结束之间没有其他消息产生, 那它就是Atomic Transaction(合并了起始标记).</p>\n");
        out.write("\n");
        out.write("\t  <imgages src=\"../imgages/transactionGuide.jpg\"/>\n");
        out.write("\t  <br/>\n");
        out.write("\t  <p><strong class=\"text-info\">Transaction API</strong></p>\n");
        out.write("\t  <code>\n");
        out.write("\t  \tcom.dianping.cat.message.MessageProducer:<br/>\n");
        out.write("        Transaction newTransaction(String type, String name);<br/>\n");
        out.write("\t\tcom.dianping.cat.message.Transaction:<br/>\n");
        out.write("        void addData(String keyValuePairs);<br/>\n");
        out.write("        void addData(String key, Object value);<br/>\n");
        out.write("        void setStatus(String status);<br/>\n");
        out.write("        void complete();<br/>\n");
        out.write("\t  </code>  \n");
        out.write("\t  <p><strong class=\"text-info\">代码示例</strong></p>\n");
        out.write("\t  \n");
        out.write("\t  <xmp class=\"well\">\n");
        out.write("     Transaction t = Cat.getProducer().newTransaction(\"your transaction type\", \"your transaction name\");\n");
        out.write("     try {\n");
        out.write("                 yourBusinessOperation();\n");
        out.write("                Cat.getProducer().logEvent(\"your event type\", \"your event name\", Event.SUCCESS, \"keyValuePairs\")\n");
        out.write("                t.setStatus(Transaction.SUCCESS);\n");
        out.write("     } catch (Exception e) {\n");
        out.write("            Cat.getProducer().logError(e);//用log4j记录系统异常，以便在Logview中看到此信息\n");
        out.write("            t.setStatus(e);\n");
        out.write("            throw e; \n");
        out.write("            \t  (CAT所有的API都可以单独使用，也可以组合使用，比如Transaction中嵌套Event或者Metric。)\n");
        out.write("                  (注意如果这里希望异常继续向上抛，需要继续向上抛出，往往需要抛出异常，让上层应用知道。)\n");
        out.write("                  (如果认为这个异常在这边可以被吃掉，则不需要在抛出异常。)\n");
        out.write("     } finally {\n");
        out.write("           t.complete();\n");
        out.write("     }\n");
        out.write("\t  </xmp>\n");
        out.write("\t  \n");
        out.write("  </dd>\n");
        out.write("  <dt><h5 class=\"text-success\">3.Event</h5></dt>\n");
        out.write("  <dd>Event用来记录次数，表名单位时间内消息发生次数，比如记录系统异常，它和transaction相比缺少了时间的统计，开销比transaction要小</dd>\n");
        out.write("  <dt><h5 class=\"text-success\">4.Metric</h5></dt>\n");
        out.write("  <h5 class='text-danger'> Metric一共有三个API，分别用来记录次数、平均、总和，统一粒度为一分钟</h5>\n");
        out.write("  <p>1).logMetricForCount用于记录一个指标值出现的次数</p>\n");
        out.write("  <p>2).logMetricForDuration用于记录一个指标出现的平均值</p>\n");
        out.write("  <p>3).logMetricForSum用于记录一个指标出现的总和</p>\n");
        out.write("  <p>4).修改指标一些图形描述信息，请到<a href=\"/cat/s/config?op=metricConfigList\">Config进行配置</a></p>\n");
        out.write("  <dt><h5 class=\"text-success\">5.Heartbeat<span class=\"text-danger\"><strong>  这个是系统CAT客户端使用，应用程序不使用此API.</strong></span></h5></dt>\n");
        out.write("  <dd>Heartbeta表示程序内定期产生的统计信息, 如CPU%, MEM%, 连接池状态, 系统负载等。</dd>\n");
        out.write("  <dt><h5 class=\"text-success\">6.一份埋点的样例</strong></span></h5></dt>\n");
        out.write("  \n");
        out.write("    <h5>Transaction用来记录一段程序响应时间</h5>\n");
        out.write("    <h5>Event用来记录一行code的执行次数</h5>\n");
        out.write("    <h5>Metric用来记录一个业务指标</h5>\n");
        out.write("    <h5 class=\"text-danger\">这些指标都是独立的，可以单独使用，主要看业务场景。</h5>\n");
        out.write("    <h5 class=\"text-success\">下面的埋点代码里面表示需要记录一个页面的响应时间，并且记录一个代码执行次数，以及记录两个业务指标,所有用了一个Transaction，一个Event，两个Metric</strong></span></h5>\n");
        out.write("    <h5 class=\"text-danger\">Transaction的埋点一定要complete，切记放在finally里面。</h5>\n");
        out.write("\t\n");
        out.write("\t<img  class=\"img-polaroid\"  width='60%' src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/develop05.png\"/>\n");
        out.write("</dl>");
        out.write("\n");
        out.write("\t   \t");
        int evalDoAfterBody = _jspx_th_c_005fwhen_005f8.doAfterBody();
        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
          break;
      } while (true);
    }
    if (_jspx_th_c_005fwhen_005f8.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.reuse(_jspx_th_c_005fwhen_005f8);
      throw new javax.servlet.jsp.SkipPageException();
    }
    _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.reuse(_jspx_th_c_005fwhen_005f8);
    return false;
  }

  private boolean _jspx_meth_c_005fwhen_005f9(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fchoose_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:when
    org.apache.taglibs.standard.tag.rt.core.WhenTag _jspx_th_c_005fwhen_005f9 = (org.apache.taglibs.standard.tag.rt.core.WhenTag) _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.WhenTag.class);
    _jspx_th_c_005fwhen_005f9.setPageContext(_jspx_page_context);
    _jspx_th_c_005fwhen_005f9.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fchoose_005f0);
    // /jsp/report/home/home.jsp(39,5) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005fwhen_005f9.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${payload.docName == 'design'}", java.lang.Boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false)).booleanValue());
    int _jspx_eval_c_005fwhen_005f9 = _jspx_th_c_005fwhen_005f9.doStartTag();
    if (_jspx_eval_c_005fwhen_005f9 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
      do {
        out.write("\n");
        out.write("\t   \t\t");
        out.write("\n");
        out.write("<h4 class=\"text-success\">监控领域建模</h4>\n");
        out.write("<img  class=\"img-polaroid\"  width='60%' src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/develop01.png\"/>\n");
        out.write("<h4 class=\"text-success\">客户端设计</h4>\n");
        out.write("<img  class=\"img-polaroid\"  width='60%' src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/develop02.png\"/>\n");
        out.write("<h4 class=\"text-success\">服务端设计</h4>\n");
        out.write("<img  class=\"img-polaroid\"  width='60%' src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/develop03.png\"/>\n");
        out.write("<h4 class=\"text-success\">应用程序部署</h4>\n");
        out.write("<img  class=\"img-polaroid\"  width='60%' src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/develop04.png\"/>\n");
        out.write("\n");
        out.write("\t   \t");
        int evalDoAfterBody = _jspx_th_c_005fwhen_005f9.doAfterBody();
        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
          break;
      } while (true);
    }
    if (_jspx_th_c_005fwhen_005f9.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.reuse(_jspx_th_c_005fwhen_005f9);
      throw new javax.servlet.jsp.SkipPageException();
    }
    _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.reuse(_jspx_th_c_005fwhen_005f9);
    return false;
  }

  private boolean _jspx_meth_c_005fwhen_005f10(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fchoose_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:when
    org.apache.taglibs.standard.tag.rt.core.WhenTag _jspx_th_c_005fwhen_005f10 = (org.apache.taglibs.standard.tag.rt.core.WhenTag) _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.WhenTag.class);
    _jspx_th_c_005fwhen_005f10.setPageContext(_jspx_page_context);
    _jspx_th_c_005fwhen_005f10.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fchoose_005f0);
    // /jsp/report/home/home.jsp(42,5) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005fwhen_005f10.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${payload.docName == 'problem'}", java.lang.Boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false)).booleanValue());
    int _jspx_eval_c_005fwhen_005f10 = _jspx_th_c_005fwhen_005f10.doStartTag();
    if (_jspx_eval_c_005fwhen_005f10 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
      do {
        out.write("\n");
        out.write("\t   \t\t");
        out.write("\n");
        out.write("<table class='table table-striped table-bordered table-condensed  '>\n");
        out.write("\t<tr class=\"text-success\"><th>常见问题</th><th>问题解答</th></tr>\n");
        out.write("\t<tr><td>在cat上显示两个不同项目名</<td><td>由于phoenix灰度升级，业务可以直接升级至1.2.2，解决问题。</td></tr>\n");
        out.write("\t<tr><td>Job打包不能执行</<td><td>请检查系统临时目录，运行程序是否有写的权限</td></tr>\n");
        out.write("\t<tr><td>Job打包出错</<td><td>升级maven-assembly-plugin至2.2-beta-5版本</td></tr>\n");
        out.write("\t<tr><td>95Line</<td><td>由于计算95line需要数据较多，为了减少内存开销，系统做了一些优化，在单个小时内某一台机器，95Line误差是5ms（数据仅供参考）</td></tr>\n");
        out.write("\t<tr><td>默认告警，邮件订阅</<td><td>请项目负责人到Alarm标签下，订阅相关异常告警、服务调用失败告警、日常邮件，Hawk会逐步下线中。</td></tr>\n");
        out.write("\t<tr><td>Problem、Hearbeat报表区间</<td><td>Problem、Heartbeat历史报表，图表X轴以1分钟为刻度，Y轴表示每1分钟的值</td></tr>\n");
        out.write("\t<tr><td>Transaction、Event报表区间</<td><td>Transaction、Event历史报表，图表X轴以1分钟为刻度，Y轴表示每1分钟的值</td></tr>\n");
        out.write("\t<tr><td>TestCase跑不起来</td><td>升级至CAT的0.4.0的版本，Pigeon版本至1.6.3以上版本</td></tr>\n");
        out.write("</table>\n");
        out.write("\n");
        out.write("<h4 class=\"text-danger\">JOB埋点问题</h4>\n");
        out.write("\n");
        out.write("<p>最近生产环境的JOB越来越多，JOB目前没有统一的框架，导致很多JOB直接使用中间件的JAR包时候，会出现很多的零散的消息。</p>\n");
        out.write("<p>这些消息都是独立的消息，比如SQL，Cache。消息的数量非常多。</p>\n");
        out.write("<p>以ba-finance-report-generate-job  为例子，每分钟会发出大概约3w个消息。后端服务还处理了很多其他的项目，导致一些不稳定。</p>\n");
        out.write("<img  class=\"img-polaroid\"  width='40%' src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/job01.png\"/>\n");
        out.write("\n");
        out.write("<h4 class=\"text-danger\">JOB埋点优化办法</h4>\n");
        out.write("<xmp class=\"well\">\n");
        out.write(" Transaction  t = Cat.newTransaction(\"Job\",\"JobName\"); //JOB都是一些后台线程，在Job开始加入一个埋点\n");
        out.write("   //这样在Job中产生的消息就在一个logview中，有效减少消息数量，并能监控到JOB执行时间\n");
        out.write(" t.complete.  //job结束的地方加入\n");
        out.write("</xmp>\n");
        out.write("\n");
        out.write("\t   \t");
        int evalDoAfterBody = _jspx_th_c_005fwhen_005f10.doAfterBody();
        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
          break;
      } while (true);
    }
    if (_jspx_th_c_005fwhen_005f10.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.reuse(_jspx_th_c_005fwhen_005f10);
      throw new javax.servlet.jsp.SkipPageException();
    }
    _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.reuse(_jspx_th_c_005fwhen_005f10);
    return false;
  }

  private boolean _jspx_meth_c_005fwhen_005f11(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fchoose_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:when
    org.apache.taglibs.standard.tag.rt.core.WhenTag _jspx_th_c_005fwhen_005f11 = (org.apache.taglibs.standard.tag.rt.core.WhenTag) _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.WhenTag.class);
    _jspx_th_c_005fwhen_005f11.setPageContext(_jspx_page_context);
    _jspx_th_c_005fwhen_005f11.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fchoose_005f0);
    // /jsp/report/home/home.jsp(45,5) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005fwhen_005f11.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${payload.docName == 'plugin'}", java.lang.Boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false)).booleanValue());
    int _jspx_eval_c_005fwhen_005f11 = _jspx_th_c_005fwhen_005f11.doStartTag();
    if (_jspx_eval_c_005fwhen_005f11 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
      do {
        out.write("\n");
        out.write("\t   \t\t");
        out.write("\n");
        out.write("<ul>\n");
        out.write("\t<li>下载<a href=\"/cat/s/plugin/chrome\">Chrome扩展插件</a>，保存到cat.crx文件</li>\n");
        out.write("\t<li>选择菜单：窗口 --&gt; 扩展程序, 或者在URL中输入：chrome://extensions</li>\n");
        out.write("\t<li>用鼠标将cat.crx文件拖到扩展程序管理页面，开始安装</li>\n");
        out.write("\t<li>现在，对于支持CAT的页面，浏览器URL框中会出现CAT小图标<br><img  class=\"img-polaroid\"  src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/cat-chrome.png\">\n");
        out.write("\t\t点击查看CAT Logview</li>\n");
        out.write("</ul>\n");
        out.write("\n");
        out.write("\t   \t");
        int evalDoAfterBody = _jspx_th_c_005fwhen_005f11.doAfterBody();
        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
          break;
      } while (true);
    }
    if (_jspx_th_c_005fwhen_005f11.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.reuse(_jspx_th_c_005fwhen_005f11);
      throw new javax.servlet.jsp.SkipPageException();
    }
    _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.reuse(_jspx_th_c_005fwhen_005f11);
    return false;
  }

  private boolean _jspx_meth_c_005fotherwise_005f0(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fchoose_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:otherwise
    org.apache.taglibs.standard.tag.common.core.OtherwiseTag _jspx_th_c_005fotherwise_005f0 = (org.apache.taglibs.standard.tag.common.core.OtherwiseTag) _005fjspx_005ftagPool_005fc_005fotherwise.get(org.apache.taglibs.standard.tag.common.core.OtherwiseTag.class);
    _jspx_th_c_005fotherwise_005f0.setPageContext(_jspx_page_context);
    _jspx_th_c_005fotherwise_005f0.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fchoose_005f0);
    int _jspx_eval_c_005fotherwise_005f0 = _jspx_th_c_005fotherwise_005f0.doStartTag();
    if (_jspx_eval_c_005fotherwise_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
      do {
        out.write("\n");
        out.write("\t   \t\t");
        out.write("\n");
        out.write("<h4 class=\"text-success\">CAT总体介绍</h4>\n");
        out.write("<h5>CAT(Central Application Tracking)是基于Java开发的实时应用监控平台，为大众点评网提供了全面的监控服务和决策支持。\n");
        out.write("</h5>\n");
        out.write("<h5>CAT作为大众点评网基础监控组件，它已经在中间件框架（MVC框架，RPC框架，数据库框架，缓存框架等）中得到广泛应用，为点评各业务线提供系统的性能指标、健康状况、基础告警等。</h5>\n");
        out.write("</br>\n");
        out.write("<h4 class=\"text-success\">CAT目前现状</h4>\n");
        out.write("\t<ul>\n");
        out.write("\t\t<li>集成中间件产品（RPC、SQL、Cache等）</li>\n");
        out.write("\t\t<li>10台CAT物理监控集群</li>\n");
        out.write("\t\t<li>1000+ 业务应用（包括部分.net以及Job）</li>\n");
        out.write("\t\t<li>3000+ 应用服务器</li>\n");
        out.write("\t\t<li>30TB 消息，~250亿消息（每天）</li>\n");
        out.write("\t</ul>\n");
        out.write("\t<br/>\n");
        out.write("<h4 class=\"text-success\">CAT监控大盘</h4>\n");
        out.write("<div>\n");
        out.write("\t<a id=\"navmetricDashboard\" class=\"btn btn-sm btn-primary\" target=\"_blank\" href=\"/cat/r/top?op=view&domain=");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.domain}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("\">系统报错大盘</a>\n");
        out.write("\t<a id=\"navdashboard\" class=\"btn btn-sm btn-primary\" target=\"_blank\" href=\"/cat/r/dependency?op=dashboard&domain=");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.domain}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("\">应用监控大盘</a>\n");
        out.write("\t<a id=\"navbussiness\" class=\"btn btn-sm btn-primary\" target=\"_blank\" href=\"/cat/r/metric?op=dashboard&domain=");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.domain}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("\">业务监控大盘</a>\n");
        out.write("\t<a id=\"navbussiness\" class=\"btn btn-sm btn-primary\" target=\"_blank\" href=\"/cat/r/network?op=dashboard&domain=");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.domain}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("\">网络监控大盘</a>\n");
        out.write("\t<a id=\"navbussiness\" class=\"btn btn-sm btn-primary\" target=\"_blank\" href=\"/cat/r/storage?op=dashboard&domain=");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.domain}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("\">数据库监控大盘</a>\n");
        out.write("</div>\n");
        out.write("</br>\n");
        out.write("<h4 class=\"text-success\">CAT其他环境</h4>\n");
        out.write("<div>\n");
        out.write("\t<a class=\"btn btn-sm btn-primary\" href=\"http://cat.qa.dianpingoa.com/cat/r/\">测试环境</a>\n");
        out.write("\t<a class=\"btn btn-sm btn-primary\" href=\"http://ppe.cat.dp/cat/r/\">PPE环境</a>\n");
        out.write("\t<a class=\"btn btn-sm btn-primary\" href=\"http://cat.dianpingoa.com/cat/r/\">生产环境</a>\n");
        out.write("</div>\n");
        out.write("</br>\n");
        out.write("<h4 class=\"text-danger\">更多接入公司，欢迎在<a href=\"https://github.com/dianping/cat/issues/753\" target=\"_blank\">登记！</a></h4>\n");
        out.write("<table>\n");
        out.write("\t<tr>\n");
        out.write("\t\t<td><a target=\"_blank\" href=\"http://www.dianping.com/\"><img  class=\"img-polaroid\"  src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/logo/dianping.png\"/></a></td>\n");
        out.write("\t\t<td><a target=\"_blank\" href=\"http://www.ctrip.com/\"><img  class=\"img-polaroid\"  src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/logo/ctrip.png\"/></a></td>\n");
        out.write("\t\t<td><a target=\"_blank\" href=\"https://www.lufax.com/\"><img  class=\"img-polaroid\"  src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/logo/lufax.png\"/></a></td>\n");
        out.write("\t\t<td><a target=\"_blank\" href=\"http://www.ly.com/\"><img  class=\"img-polaroid\"  src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/logo/ly.png\"/></a></td>\n");
        out.write("\t</tr>\n");
        out.write("\t<tr>\n");
        out.write("\t\t<td><a target=\"_blank\" href=\"http://www.liepin.com/\"><img  class=\"img-polaroid\"  src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/logo/liepin.png\"/></a></td>\n");
        out.write("\t\t<td><a target=\"_blank\" href=\"http://www.qipeipu.com/\"><img  class=\"img-polaroid\"  src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/logo/qipeipu.jpg\"/></a></td>\n");
        out.write("\t\t<td><a target=\"_blank\" href=\"http://www.shangpin.com/\"><img  class=\"img-polaroid\"  src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/logo/shangping.jpg\"/></a></td>\n");
        out.write("\t\t<td><a target=\"_blank\" href=\"http://www.travelzen.com/flight/\"><img  class=\"img-polaroid\"  src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/logo/zhenlv.png\"/></a></td>\n");
        out.write("\t\t<td></td>\n");
        out.write("\t</tr>\n");
        out.write("\t<tr>\n");
        out.write("\t\t<td><a target=\"_blank\" href=\"http://www.oppo.com/\"><img  class=\"img-polaroid\"  src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.webapp}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
        out.write("/images/logo/oppo.png\"/></a></td>\n");
        out.write("\t</tr>\n");
        out.write("</table>\n");
        out.write("\n");
        out.write("\t   \t");
        int evalDoAfterBody = _jspx_th_c_005fotherwise_005f0.doAfterBody();
        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
          break;
      } while (true);
    }
    if (_jspx_th_c_005fotherwise_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      _005fjspx_005ftagPool_005fc_005fotherwise.reuse(_jspx_th_c_005fotherwise_005f0);
      throw new javax.servlet.jsp.SkipPageException();
    }
    _005fjspx_005ftagPool_005fc_005fotherwise.reuse(_jspx_th_c_005fotherwise_005f0);
    return false;
  }

  private class Helper
      extends org.apache.jasper.runtime.JspFragmentHelper
  {
    private javax.servlet.jsp.tagext.JspTag _jspx_parent;
    private int[] _jspx_push_body_count;

    public Helper( int discriminator, javax.servlet.jsp.JspContext jspContext, javax.servlet.jsp.tagext.JspTag _jspx_parent, int[] _jspx_push_body_count ) {
      super( discriminator, jspContext, _jspx_parent );
      this._jspx_parent = _jspx_parent;
      this._jspx_push_body_count = _jspx_push_body_count;
    }
    public boolean invoke0( javax.servlet.jsp.JspWriter out ) 
      throws java.lang.Throwable
    {
      out.write("\n");
      out.write("\t<div class=\"tab-content\">\n");
      out.write("\t\t\t");
      if (_jspx_meth_c_005fchoose_005f0(_jspx_parent, _jspx_page_context))
        return true;
      out.write("\n");
      out.write("\t</div>\n");
      out.write("<br>\n");
      out.write("<br>\n");
      out.write("<a href=\"?op=checkpoint&domain=");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.domain}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("&date=");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${model.date}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("\" style=\"color:#FFF\">Do checkpoint here</a>\n");
      out.write("<script>\n");
      out.write("\tvar liElement = $('#");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${payload.docName}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("Button');\n");
      out.write("\tif(liElement.size() == 0){\n");
      out.write("\t\tliElement = $('#indexButton');\n");
      out.write("\t}\n");
      out.write("\tliElement.addClass('active');\n");
      out.write("</script>\n");
      return false;
    }
    public void invoke( java.io.Writer writer )
      throws javax.servlet.jsp.JspException
    {
      javax.servlet.jsp.JspWriter out = null;
      if( writer != null ) {
        out = this.jspContext.pushBody(writer);
      } else {
        out = this.jspContext.getOut();
      }
      try {
        Object _jspx_saved_JspContext = this.jspContext.getELContext().getContext(javax.servlet.jsp.JspContext.class);
        this.jspContext.getELContext().putContext(javax.servlet.jsp.JspContext.class,this.jspContext);
        switch( this.discriminator ) {
          case 0:
            invoke0( out );
            break;
        }
        jspContext.getELContext().putContext(javax.servlet.jsp.JspContext.class,_jspx_saved_JspContext);
      }
      catch( java.lang.Throwable e ) {
        if (e instanceof javax.servlet.jsp.SkipPageException)
            throw (javax.servlet.jsp.SkipPageException) e;
        throw new javax.servlet.jsp.JspException( e );
      }
      finally {
        if( writer != null ) {
          this.jspContext.popBody();
        }
      }
    }
  }
}
